{"version":3,"sources":["src/components/templateParse/updateState.js","src/components/conditionalNodes.js","src/components/templateParse/conditionalCache.js","src/components/genModelList.js","src/components/componentParse.js","src/components/templateParse/replaceCommentBlock.js","src/components/ternaryOps.js","src/components/templateParse/valAssign.js","src/components/templateParse/replaceHandleBars.js","src/components/templateParse/inspectAttributes.js","src/components/templateParse/addEvent.js","src/components/templateParse/reconcile.js","src/components/templateParse/diffNodes.js","src/components/genElement.js","src/components/parseStr.js","src/base/mount.js","utils.js","src/components/strInterpreter.js","src/base/createModel.js","keet.js"],"names":["updateState","state","updateStateList","catchNode","node","start","cNode","nextSibling","nodeType","DOCUMENT_ELEMENT_TYPE","isEqualNode","remove","firstChild","resolveConditionalNodes","conditional","setup","runner","addState","currentNode","fetchFrag","frag","document","createDocumentFragment","cache","hasOwnProperty","cloneNode","call","this","parentNode","insertBefore","nodeValue","match","conditionalNodesRawEnd","__pristineFragment__","DOCUMENT_COMMENT_TYPE","appendChild","check","conditionalNodesRawStart","trim","reConditional","concat","nodes","conditionalCache","base","i","length","bind","conditionalNodes","removeProtoModel","id","p","getElementById","childNodes","genModelList","model","reconcile","modelList","listClone","list","listArg","mLength","enableFiltering","undefined","dirty","setAttribute","lastChild","getKeetGlobalComponent","component","window","babelHelpers.typeof","__keetGlobalComponentRef__","componentParse","componentStr","replace","c","cacheInit","ID","getId","el","replaceChild","callBatchPoolUpdate","render","assert","replaceCommentBlock","value","rep","modelRep","re","ternaryOps","input","t","split","condition","leftHand","rightHand","test","valAssign","withTo","RegExp","replaceHandleBars","isAttr","props","ln","tnr","isObjectNotation","self","ref","strInterpreter","result","inspectAttributes","nodeAttributes","attributes","a","ns","name","localName","removeAttribute","lookupParentNode","rootNode","hasAttribute","getAttribute","addEvent","evtData","evtName","Object","keys","handler","addEventListener","fn","e","stopPropagation","target","currentTarget","getIndex","addEventModel","testEventNode","evtStore","obs","args","push","hasChildNodes","modelRaw","recon","_this","hasAttributes","events","map","isModel","instance","isEqual","oldNode","newNode","isPristine","isIgnored","arbiter","nodeName","checked","setAttr","oAttr","output","iAttr","j","attr","patch","diff","store","count","ignoreNextSibling","newStore","checkNew","index","oldParentNode","checkOld","removeChild","diffNodes","IS_STUB","clearState","stateList","indexOf","parseStr","stub","setState","componentDidMount","_mount","tempDiv","createElement","innerHTML","n","f","DOCUMENT_TEXT_TYPE","_typeof","DOCUMENT_FRAGMENT_TYPE","genId","rd","Math","random","toString","minId","val","msg","Error","html","_len","arguments","Array","_key","literals","shift","substs","slice","raw","reduce","acc","lit","join","str","res","m","DELAY","morpher","genElement","componentDidUpdate","timer","updateContext","delay","clearTimeout","setTimeout","nextState","isArray","inVal","defineProperty","enumerable","configurable","get","set","notEqual","b","async","inform","mId","exec","apply","createModel","indentity","listFilter","_this2","prop","filter","obj","subscribe","add","_extends","kdata-id","update","updateObj","destroy","destroyObj","Keet","storeRef","mount","link","componentWillMount"],"mappings":"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","file":"keet-min.js","sourcesContent":["export default function (state, updateStateList) {\r\n  if (typeof updateStateList === 'function') updateStateList(state)\r\n}\r\n","const conditionalNodesRawEnd = /\\{\\{\\/([^{}]+)\\}\\}/g\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nlet cache = {}\r\n\r\n// rebuild the node structure\r\nfunction catchNode (node, start) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.nextSibling\r\n    if (cNode && cNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (cNode.isEqualNode(start)) {\r\n        cNode.remove()\r\n        start = start.nextSibling\r\n      } else {\r\n        catchNode(cNode.firstChild, start)\r\n      }\r\n    } else if (cNode.isEqualNode(start)) {\r\n      cNode.remove()\r\n      start = start.nextSibling\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolveConditionalNodes (node, conditional, setup, runner, addState) {\r\n  let currentNode\r\n  let cNode\r\n  let fetchFrag\r\n  let frag = document.createDocumentFragment()\r\n  if (setup === 'initial' && !cache.hasOwnProperty(conditional)) {\r\n    cNode = node\r\n    while (cNode) {\r\n      currentNode = cNode\r\n      cNode = cNode.nextSibling\r\n      if (currentNode.nodeType !== DOCUMENT_ELEMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawEnd)) {\r\n        cNode = null\r\n        cache[conditional] = cache[conditional] || {}\r\n        // clean up pristine node\r\n        catchNode(this.__pristineFragment__.firstChild, frag.firstChild)\r\n        // since we work backward no need to check fragment recursive conditional states\r\n        cache[conditional].frag = frag\r\n      } else if (currentNode.nodeType !== DOCUMENT_COMMENT_TYPE) {\r\n        frag.appendChild(currentNode)\r\n      }\r\n    }\r\n  } else if (setup === 'conditional-set') {\r\n    if (node.nextSibling.isEqualNode(cache[conditional].frag.firstChild)) return\r\n    fetchFrag = cache[conditional].frag.cloneNode(true)\r\n    runner.call(this, fetchFrag.firstChild, addState)\r\n    node.parentNode.insertBefore(fetchFrag, node.nextSibling)\r\n  }\r\n}\r\n\r\nexport {\r\n  resolveConditionalNodes as default,\r\n  cache\r\n}\r\n","import updateState from './updateState'\r\nimport conditionalNodes from '../conditionalNodes'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\n\r\nlet conditional\r\nlet currentNode\r\nlet state\r\nlet nodes\r\n\r\nfunction check (node) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      check.call(this, currentNode.firstChild)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      conditional = currentNode.nodeValue.trim().match(reConditional)\r\n      state = state.concat(conditional)\r\n      nodes = nodes.concat(currentNode)\r\n    }\r\n  }\r\n}\r\n\r\nfunction conditionalCache (addState) {\r\n  state = []\r\n  nodes = []\r\n  check.call(this, this.base.firstChild)\r\n  let i = state.length\r\n  while (i > 0) {\r\n    i--\r\n    updateState(state[i], addState.bind(this))\r\n    conditionalNodes.call(this, nodes[i], state[i], 'initial')\r\n  }\r\n}\r\n\r\nexport default conditionalCache\r\n","\r\n// storage for model state\r\nlet cache = {}\r\n\r\nfunction removeProtoModel (node, id) {\r\n  let p = node.getElementById(id)\r\n  if (p) p.childNodes[1].remove()\r\n}\r\n\r\nfunction genModelList (node, model, reconcile) {\r\n  let modelList\r\n  let i\r\n  let listClone\r\n  let parentNode\r\n  let list\r\n  let listArg\r\n  let mLength\r\n\r\n  cache[model] = cache[model] || {}\r\n\r\n  // check if the model use filtering\r\n  listArg = this[model] && this[model].enableFiltering ? 'listFilter' : 'list'\r\n\r\n  if (!cache[model][listArg]) {\r\n    cache[model][listArg] = node.nextSibling.cloneNode(true)\r\n    node.nextSibling.remove()\r\n    // also remove from pristine nodes / conditional cache store\r\n    removeProtoModel(this.__pristineFragment__, node.parentNode.id)\r\n  }\r\n\r\n  list = cache[model][listArg]\r\n\r\n  if (this[model] !== undefined && this[model].hasOwnProperty(listArg)) {\r\n    parentNode = node.parentNode\r\n\r\n    modelList = this[model][listArg]\r\n\r\n    if (!this[model].dirty) {\r\n      parentNode.setAttribute('pristine-model', '')\r\n      return\r\n    }\r\n\r\n    i = 0\r\n\r\n    mLength = modelList.length\r\n\r\n    while (i < mLength) {\r\n      listClone = list.cloneNode(true)\r\n      reconcile.call(this, listClone, null, modelList[i])\r\n      listClone.setAttribute('kdata-id', modelList[i]['kdata-id'])\r\n      parentNode.insertBefore(listClone, parentNode.lastChild)\r\n      i++\r\n    }\r\n    this[model].dirty = false\r\n  }\r\n}\r\n\r\nexport default genModelList\r\n","import { assert, getId } from '../../utils'\r\n\r\nlet cacheInit = {}\r\n\r\nfunction getKeetGlobalComponent(component) {\r\n  if (window && typeof window.__keetGlobalComponentRef__ === 'object') {\r\n    return window.__keetGlobalComponentRef__[component]\r\n  }\r\n  return\r\n}\r\n\r\nexport default function (componentStr, node) {\r\n  const component = componentStr.replace('component:', '')\r\n  const c = this[component] || getKeetGlobalComponent(component)\r\n  if (c !== undefined) {\r\n    // this is for initial component runner\r\n    if (!cacheInit[c.ID]) {\r\n      c.render(true)\r\n      cacheInit[c.ID] = c.base.cloneNode(true)\r\n      node.parentNode.replaceChild(c.base, node)\r\n    } else {\r\n      // we need to reattach event listeners if the node is not available on DOM\r\n      if (!getId(c.el)) {\r\n        c.base = c.__pristineFragment__.cloneNode(true)\r\n        c.render(true)\r\n        node.parentNode.replaceChild(c.base, node)\r\n      } else {\r\n        node.parentNode.replaceChild(cacheInit[c.ID].cloneNode(true), node)\r\n        // inform sub-component to update\r\n        c.callBatchPoolUpdate()\r\n      }\r\n    }\r\n  } else {\r\n    assert(false, 'Component ' + component + ' does not exist.')\r\n  }\r\n}\r\n","import genModelList from '../genModelList'\r\nimport componentParse from '../componentParse'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\nconst model = /^model:/g\r\nconst component = /^component:([^{}]+)/g\r\n\r\nexport default function (value, node, reconcile) {\r\n  let rep\r\n  let modelRep\r\n\r\n  if (value.match(re)) {\r\n    rep = value.replace(re, '$1').trim()\r\n    if (rep.match(model)) {\r\n      modelRep = rep.replace('model:', '')\r\n      genModelList.call(this, node, modelRep, reconcile)\r\n    } else if (rep.match(component)) {\r\n      componentParse.call(this, rep, node)\r\n    }\r\n  }\r\n}\r\n","// function to resolve ternary operation\r\n\r\nconst test = str => str === '\\'\\'' || str === '\"\"' || str === 'null' ? '' : str\r\n\r\nexport default function (input) {\r\n  if (input.match(/([^?]*)\\?([^:]*):([^;]*)|(\\s*=\\s*)[^;]*/g)) {\r\n    let t = input.split('?')\r\n    let condition = t[0]\r\n    let leftHand = t[1].split(':')[0]\r\n    let rightHand = t[1].split(':')[1]\r\n\r\n    // check the condition fulfillment\r\n\r\n    if (this) {\r\n      if (this[condition]) {\r\n        return {\r\n          value: test(leftHand),\r\n          state: condition\r\n        }\r\n      } else {\r\n        return {\r\n          value: test(rightHand),\r\n          state: condition\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  } else return false\r\n}\r\n","export default function (node, value, replace, withTo) {\r\n  let re = new RegExp(replace, 'g')\r\n  node.nodeValue = node.nodeValue.replace(re, withTo)\r\n}\r\n","import ternaryOps from '../ternaryOps'\r\nimport strInterpreter from '../strInterpreter'\r\nimport updateState from './updateState'\r\nimport valAssign from './valAssign'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nexport default function (value, node, addState, isAttr, model) {\r\n  const props = value.match(re)\r\n  if (!props) return\r\n  let ln = props.length\r\n  let rep\r\n  let tnr\r\n  let isObjectNotation\r\n\r\n  let self = this\r\n\r\n  let ref = model || this\r\n\r\n  while (ln) {\r\n    ln--\r\n    rep = props[ln].replace(re, '$1')\r\n    tnr = ternaryOps.call(ref, rep)\r\n    isObjectNotation = strInterpreter(rep)\r\n    if (isObjectNotation) {\r\n      if (!isAttr) {\r\n        if (isObjectNotation[0] === 'this' && self[isObjectNotation[1]] !== undefined && typeof self[isObjectNotation[1]] === 'function') {\r\n          let result = self[isObjectNotation[1]]()\r\n          if (result !== undefined) {\r\n            valAssign(node, value, '{{' + rep + '}}', result)\r\n          }\r\n        } else {\r\n          updateState(rep, addState)\r\n          valAssign(node, value, '{{' + rep + '}}', self[isObjectNotation[0]][isObjectNotation[1]])\r\n        }\r\n      } else {\r\n        if (isObjectNotation[0] === 'this' && self[isObjectNotation[1]] !== undefined && typeof self[isObjectNotation[1]] === 'function') {\r\n          let result = self[isObjectNotation[1]](ref)\r\n          return result !== undefined ? result : value\r\n        } else {\r\n          updateState(rep, addState)\r\n          return value.replace(props, self[isObjectNotation[0]][isObjectNotation[1]])\r\n        }\r\n      }\r\n    } else {\r\n      if (tnr) {\r\n        updateState(tnr.state, addState)\r\n        if (!isAttr) {\r\n          valAssign(node, value, '{{' + rep + '}}', tnr.value)\r\n        } else {\r\n          return value.replace(props, tnr.value)\r\n        }\r\n      } else {\r\n        if (ref[rep] !== undefined) {\r\n          updateState(rep, addState)\r\n          if (!isAttr) {\r\n            valAssign(node, value, '{{' + rep + '}}', ref[rep])\r\n          } else {\r\n            return value.replace(props, ref[rep])\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import replaceHandleBars from './replaceHandleBars'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction inspectAttributes (node, addState, model) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let ns\r\n  let name\r\n\r\n  for (i = nodeAttributes.length; i--;) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    ns = a.nodeValue\r\n    if (re.test(name)) {\r\n      node.removeAttribute(name)\r\n      name = replaceHandleBars.call(this, name, node, addState, true, model)\r\n      node.setAttribute(name, ns)\r\n    } else if (re.test(ns)) {\r\n      ns = replaceHandleBars.call(this, ns, node, addState, true, model)\r\n      if (name === 'checked') {\r\n        if (ns === '') {\r\n          node.removeAttribute(name)\r\n          // node.checked = false\r\n        } else {\r\n          // node.checked = true\r\n          node.setAttribute(name, '')\r\n        }\r\n        // node.removeAttribute(name)\r\n      } else {\r\n        if (ns === '') {\r\n          node.setAttribute(name, '')\r\n        } else {\r\n          node.setAttribute(name, ns)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default inspectAttributes\r\n","const DOCUMENT_ELEMENT_TYPE = 1\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction lookupParentNode (rootNode, node) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.parentNode\r\n    if (cNode.nodeType === DOCUMENT_ELEMENT_TYPE && cNode.hasAttribute('kdata-id')) {\r\n      return { id: cNode.getAttribute('kdata-id'), node: cNode }\r\n    }\r\n    if (cNode.isEqualNode(rootNode)) {\r\n      node = null\r\n    }\r\n  }\r\n}\r\n\r\nconst getIndex = (id, model) => model.list.map(m => m['kdata-id']).indexOf(id)\r\n\r\nfunction addEvent (node, evtData) {\r\n  // delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    node.addEventListener(evtName, this[handler].bind(this), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nfunction fn (model, handler, node, e) {\r\n  e.stopPropagation()\r\n  if (e.target !== e.currentTarget) {\r\n    let t = lookupParentNode(node, e.target)\r\n    this[handler](model.list[getIndex(t.id, model)], e.target, t.node, e)\r\n  }\r\n}\r\n\r\nfunction addEventModel (node, evtData) {\r\n  // delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    let rep = node.firstChild.nodeValue.replace(re, '$1').trim()\r\n    rep = rep.replace('model:', '')\r\n    let model = this[rep]\r\n    node.addEventListener(evtName, fn.bind(this, model, handler, node), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nexport {\r\n  addEvent,\r\n  addEventModel\r\n}\r\n","import replaceCommentBlock from './replaceCommentBlock'\r\nimport inspectAttributes from './inspectAttributes'\r\nimport replaceHandleBars from './replaceHandleBars'\r\nimport conditionalNodes from '../conditionalNodes'\r\n\r\nimport { getId } from '../../../utils'\r\nimport { addEvent, addEventModel } from './addEvent'\r\n\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\nconst re = /{{([^{}]+)}}/g\r\nconst modelRaw = /\\{\\{model:([^{}]+)\\}\\}/g\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nfunction testEventNode (node) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let name\r\n  let value\r\n  let evtName\r\n  let handler\r\n  let evtStore = []\r\n  let obs\r\n  let args\r\n\r\n  while (i < nodeAttributes.length) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    value = a.nodeValue\r\n    if (/^k-/.test(name)) {\r\n      evtName = name.replace(/^k-/, '')\r\n      handler = value.match(/[a-zA-Z]+(?![^(]*\\))/)[0]\r\n      args = value.match(/\\(([^{}]+)\\)/)\r\n      args = args ? args[1] : ''\r\n      obs = {}\r\n      obs[evtName] = handler\r\n      if (args) obs[args] = true\r\n      obs['isModel'] = false\r\n      evtStore.push(obs)\r\n      if (node.hasChildNodes() && node.firstChild.nodeType !== DOCUMENT_ELEMENT_TYPE && node.firstChild.nodeValue.match(modelRaw)) {\r\n        obs['isModel'] = true\r\n      }\r\n    }\r\n    i++\r\n  }\r\n  return evtStore\r\n}\r\n\r\nlet events\r\nlet c\r\nlet currentNode\r\n\r\nfunction recon (node, addState, model) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (currentNode.hasAttributes()) {\r\n        inspectAttributes.call(this, currentNode, addState, model)\r\n\r\n        // to take advantage of caching always assigned id to the node\r\n        // we only assign eventListener on first mount to DOM or when the node is not available on DOM\r\n        if (!getId(currentNode.id)) {\r\n          events = testEventNode.call(this, currentNode)\r\n          if (events.length) {\r\n            events.map(e => {\r\n              !e.isModel ? addEvent.call(this, currentNode, e) : addEventModel.call(this, currentNode, e)\r\n              currentNode.removeAttribute(`k-${Object.keys(e)[0]}`)\r\n            })\r\n          }\r\n        }\r\n      }\r\n      recon.call(this, currentNode.firstChild, addState, model)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      c = currentNode.nodeValue.trim().match(reConditional)\r\n      c = c && c[0]\r\n      if (this[c]) {\r\n        conditionalNodes.call(this, currentNode, c, 'conditional-set', reconcile, addState)\r\n      }\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(re) && !currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      replaceCommentBlock.call(this, currentNode.nodeValue, currentNode, reconcile)\r\n    } else {\r\n      replaceHandleBars.call(this, currentNode.nodeValue, currentNode, addState, null, model)\r\n    }\r\n  }\r\n}\r\n\r\nfunction reconcile (instance, addState, model) {\r\n  recon.call(this, instance, addState, model)\r\n}\r\n\r\nexport default reconcile\r\n","import { getId } from '../../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nfunction isEqual (oldNode, newNode) {\r\n  return (\r\n    (isPristine(newNode) ||\r\n    isIgnored(oldNode) && isIgnored(newNode)) ||\r\n    oldNode.isEqualNode(newNode)\r\n  )\r\n}\r\n\r\nfunction isIgnored (node) {\r\n  return node.getAttribute('data-ignore') != null\r\n}\r\n\r\nfunction arbiter (oldNode, newNode) {\r\n  if (oldNode.nodeName !== 'INPUT') return\r\n  if (oldNode.checked !== newNode.checked) {\r\n    oldNode.checked = newNode.checked\r\n  }\r\n}\r\n\r\nfunction setAttr (oldNode, newNode) {\r\n  let oAttr = newNode.attributes\r\n  let output = {}\r\n  let i = 0\r\n  while (i < oAttr.length) {\r\n    output[oAttr[i].name] = oAttr[i].value\r\n    i++\r\n  }\r\n  let iAttr = oldNode.attributes\r\n  let input = {}\r\n  let j = 0\r\n  while (j < iAttr.length) {\r\n    input[iAttr[j].name] = iAttr[j].value\r\n    j++\r\n  }\r\n  for (let attr in output) {\r\n    if (oldNode.attributes[attr] && oldNode.attributes[attr].name === attr && oldNode.attributes[attr].value !== output[attr]) {\r\n      oldNode.setAttribute(attr, output[attr])\r\n    } else {\r\n      // add new attributes as long is not part of k-<eventListener>\r\n      if (!oldNode.hasAttribute(attr) && !/^k-/.test(attr)) {\r\n        oldNode.setAttribute(attr, output[attr])\r\n      }\r\n    }\r\n  }\r\n  for (let attr in input) {\r\n    // if attributes does not exist on the new node we removed it from the old node\r\n    if (newNode.attributes[attr] && oldNode.attributes[attr]) {\r\n    } else {\r\n      oldNode.removeAttribute(attr)\r\n    }\r\n  }\r\n}\r\n\r\nfunction patch (oldNode, newNode) {\r\n  if (oldNode.nodeType === newNode.nodeType) {\r\n    if (oldNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      arbiter(oldNode, newNode)\r\n      if (isEqual(oldNode, newNode)) return\r\n      diff(oldNode.firstChild, newNode.firstChild)\r\n      if (oldNode.nodeName === newNode.nodeName) {\r\n        setAttr(oldNode, newNode)\r\n      } else {\r\n        oldNode.parentNode.replaceChild(newNode, oldNode)\r\n      }\r\n    } else {\r\n      if (oldNode.nodeValue !== newNode.nodeValue) {\r\n        oldNode.nodeValue = newNode.nodeValue\r\n      }\r\n    }\r\n  } else {\r\n    oldNode.parentNode.replaceChild(newNode, oldNode)\r\n  }\r\n}\r\n\r\nfunction getIndex (store, count) {\r\n  return store.length - count - 1\r\n}\r\n\r\nlet checkNew\r\nlet checkOld\r\n\r\nfunction diff (oldNode, newNode, ignoreNextSibling) {\r\n  let count = 0\r\n  let newStore = []\r\n  while (newNode) {\r\n    count++\r\n    checkNew = newNode\r\n    newNode = ignoreNextSibling ? null : newNode.nextSibling\r\n    newStore.push(checkNew)\r\n  }\r\n  let index\r\n  let oldParentNode = oldNode && oldNode.parentNode\r\n  while (oldNode) {\r\n    count--\r\n    checkOld = oldNode\r\n    oldNode = ignoreNextSibling ? null : oldNode.nextSibling\r\n    index = getIndex(newStore, count)\r\n    if (checkOld && newStore[index]) {\r\n      patch(checkOld, newStore[index])\r\n    } else if (checkOld && !newStore[index]) {\r\n      oldParentNode.removeChild(checkOld)\r\n    }\r\n    if (oldNode === null) {\r\n      while (count > 0) {\r\n        count--\r\n        index = getIndex(newStore, count)\r\n        oldParentNode.appendChild(newStore[index])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isPristine (node) {\r\n  return node.hasAttribute('pristine-model')\r\n}\r\n\r\nfunction diffNodes (instance) {\r\n  let base = getId(this.el)\r\n  if (base && !this.IS_STUB) {\r\n    diff(base.firstChild, instance)\r\n  } else if (base && !isPristine(instance)) {\r\n    diff(base.firstChild, instance.firstChild)\r\n  }\r\n}\r\n\r\nfunction diffModelNodes (oldModel, newModel, ignoreNextSibling) {\r\n  diff(oldModel, newModel, ignoreNextSibling)\r\n}\r\n\r\nexport {\r\n  diffNodes as default,\r\n  diffModelNodes\r\n}\r\n","// import conditionalSet from './templateParse/conditionalSet'\r\nimport reconcile from './templateParse/reconcile'\r\n// import eventBuff from './templateParse/eventBuff'\r\nimport diffNodes from './templateParse/diffNodes'\r\nimport strInterpreter from './strInterpreter'\r\n\r\nconst DELAY = 0\r\n\r\nconst morpher = function () {\r\n  genElement.call(this)\r\n  // exec life-cycle componentDidUpdate\r\n  if (this.componentDidUpdate && typeof this.componentDidUpdate === 'function') {\r\n    this.componentDidUpdate()\r\n  }\r\n}\r\n\r\nlet timer = {}\r\n\r\nconst updateContext = function (fn, delay) {\r\n  timer[this.ID] = timer[this.ID] || null\r\n  clearTimeout(timer[this.ID])\r\n  timer[this.ID] = setTimeout(() => fn.call(this), delay)\r\n}\r\n\r\nconst nextState = function (i) {\r\n  let self = this\r\n  let state\r\n  let value\r\n  if (!stateList[this.ID]) return\r\n  if (i < stateList[this.ID].length) {\r\n    state = stateList[this.ID][i]\r\n    value = this[state]\r\n\r\n    // if value is undefined, likely has object notation we convert it to array\r\n    if (value === undefined) value = strInterpreter(state)\r\n\r\n    if (value && Array.isArray(value)) {\r\n      // using split object notation as base for state update\r\n      let inVal = this[value[0]][value[1]]\r\n\r\n      Object.defineProperty(this[value[0]], value[1], {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return inVal\r\n        },\r\n        set: function (val) {\r\n          inVal = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    } else {\r\n      // handle parent state update if the state is not an object\r\n      Object.defineProperty(this, state, {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return value\r\n        },\r\n        set: function (val) {\r\n          value = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    }\r\n    i++\r\n    nextState.call(this, i)\r\n  }\r\n}\r\n\r\nconst setState = function () {\r\n  nextState.call(this, 0)\r\n}\r\n\r\nlet stateList = {}\r\n\r\nfunction clearState () {\r\n  if (stateList[this.ID]) stateList[this.ID] = []\r\n}\r\n\r\nfunction addState (state) {\r\n  stateList[this.ID] = stateList[this.ID] || []\r\n  if (stateList[this.ID].indexOf(state) === -1) { stateList[this.ID] = stateList[this.ID].concat(state) }\r\n}\r\n\r\nconst genElement = function () {\r\n  this.base = this.__pristineFragment__.cloneNode(true)\r\n  // conditionalSet.call(this, this.base.firstChild)\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  // eventBuff.call(this, this.base.firstChild)\r\n  diffNodes.call(this, this.base.firstChild)\r\n}\r\n\r\nexport {\r\n  genElement,\r\n  addState,\r\n  setState,\r\n  clearState,\r\n  updateContext,\r\n  morpher\r\n}\r\n","import conditionalCache from './templateParse/conditionalCache'\r\n// import conditionalSet from './templateParse/conditionalSet'\r\nimport reconcile from './templateParse/reconcile'\r\n// import eventBuff from './templateParse/eventBuff'\r\nimport { setState, addState } from './genElement'\r\nimport { getId, assert } from '../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nexport default function (stub) {\r\n  conditionalCache.call(this, addState.bind(this))\r\n  // conditionalSet.call(this, this.base.firstChild)\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  // eventBuff.call(this, this.base.firstChild)\r\n  const el = stub || getId(this.el)\r\n  if (el) {\r\n    if (el.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      el.setAttribute('data-ignore', '')\r\n    } else {\r\n      assert(this.base.childNodes.length === 1, 'Sub-component should only has a single rootNode.')\r\n      !this.base.firstChild.hasAttribute('data-ignore') && this.base.firstChild.setAttribute('data-ignore', '')\r\n    }\r\n    // listen to state changes\r\n    setState.call(this)\r\n    // mount fragment to DOM\r\n    if (!stub) {\r\n      el.appendChild(this.base)\r\n    }\r\n\r\n    // since component already rendered, trigger its life-cycle method\r\n    if (this.componentDidMount && typeof this.componentDidMount === 'function') {\r\n      this.componentDidMount()\r\n    }\r\n  } else {\r\n    assert(false, 'No element with id: \"' + this.el + '\" exist.')\r\n  }\r\n}\r\n","import { clearState } from '../components/genElement'\r\nimport { assert } from '../../utils'\r\n\r\nconst DOCUMENT_FRAGMENT_TYPE = 11\r\nconst DOCUMENT_TEXT_TYPE = 3\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n/**\r\n * @private\r\n * @description\r\n * Mount an instance of string or html elements\r\n *\r\n * @param {String|Object} instance - the html/string\r\n */\r\nexport default function (instance) {\r\n  let base\r\n  let tempDiv\r\n  let frag = document.createDocumentFragment()\r\n  // Before we begin to parse an instance, do a run-down checks\r\n  // to clean up back-tick string which usually has line spacing.\r\n  if (typeof instance === 'string') {\r\n    base = instance.trim().replace(/\\s+/g, ' ')\r\n    tempDiv = document.createElement('div')\r\n    tempDiv.innerHTML = base\r\n    let n = tempDiv.firstChild\r\n    let f\r\n    while (n) {\r\n      f = n\r\n      n = n.nextSibling\r\n      if(f.nodeType !== DOCUMENT_TEXT_TYPE && f.nodeValue !== ' ') {\r\n        frag.appendChild(f.cloneNode(true))\r\n      }\r\n    }\r\n  // If instance is a html element process as html entities\r\n  } else if (typeof instance === 'object' && instance['nodeType']) {\r\n    if (instance['nodeType'] === DOCUMENT_ELEMENT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else if (instance['nodeType'] === DOCUMENT_FRAGMENT_TYPE) {\r\n      frag = instance\r\n    } else if (instance['nodeType'] === DOCUMENT_TEXT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else {\r\n      assert(false, 'Unable to parse instance, unknown type.')\r\n    }\r\n  } else {\r\n    assert(false, 'Parameter is not a string or a html element.')\r\n  }\r\n  // we store the pristine instance in __pristineFragment__\r\n  this.__pristineFragment__ = frag.cloneNode(true)\r\n  this.base = frag\r\n\r\n  // cleanup states on mount\r\n  clearState.call(this)\r\n  return this\r\n}\r\n","const genId = () => {\r\n  const rd = () => (Math.random() * 1 * 1e17).toString(36)\r\n  return `KDATA-${rd()}-${rd()}`\r\n}\r\n\r\nconst minId = () => (Math.random() * 1 * 1e17).toString(36)\r\n\r\nconst getId = id => document.getElementById(id)\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Check a node availability in 100ms, if not found silenty skip the event\r\n * or execute a callback\r\n *\r\n * @param {string} id - the node id\r\n * @param {function} callback - the function to execute on success\r\n * @param {function} notFound - the function to execute on failed\r\n */\r\nconst checkNodeAvailability = (component, componentName, callback, notFound) => {\r\n  let ele = getId(component.el)\r\n  let found = false\r\n  let t\r\n  function find () {\r\n    ele = getId(component.el)\r\n    if (ele) {\r\n      clearInterval(t)\r\n      found = true\r\n      callback(component, componentName, ele)\r\n    }\r\n  }\r\n  function fail () {\r\n    clearInterval(t)\r\n    if (!found && notFound && typeof notFound === 'function') notFound()\r\n  }\r\n  if (ele) return ele\r\n  else {\r\n    t = setInterval(find, 0)\r\n    // ignore finding the node after sometimes\r\n    setTimeout(fail, 5)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Confirm that a value is truthy, throws an error message otherwise.\r\n *\r\n * @param {*} val - the val to test.\r\n * @param {string} msg - the error message on failure.\r\n * @throws {Error}\r\n */\r\nconst assert = (val, msg) => {\r\n  if (!val) throw new Error('(keet) ' + msg)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Simple html template literals MODIFIED from : http://2ality.com/2015/01/template-strings-html.html\r\n * by Dr. Axel Rauschmayer\r\n * no checking for wrapping in root element\r\n * no strict checking\r\n * remove spacing / indentation\r\n * keep all spacing within html tags\r\n * include handling ${} in the literals\r\n */\r\nconst html = (...args) => {\r\n  const literals = args.shift()\r\n  const substs = args.slice()\r\n\r\n  let result = literals.raw.reduce((acc, lit, i) => acc + substs[i - 1] + lit)\r\n  // remove spacing, indentation from every line\r\n  result = result.split(/\\n+/)\r\n  result = result.map(t => t.trim()).join('')\r\n  return result\r\n}\r\n\r\nexport {\r\n  html,\r\n  assert,\r\n  checkNodeAvailability,\r\n  genId,\r\n  getId,\r\n  minId\r\n}\r\n","export default (str) => {\r\n  let res = str.match(/\\.*\\./g)\r\n  let result\r\n  if (res && res.length > 0) {\r\n    return str.split('.')\r\n  }\r\n  return result\r\n}\r\n","import { minId } from '../../utils'\r\n\r\n/**\r\n * @module keet/createModel\r\n * @example\r\n * import { createModel } from 'keet'\r\n *\r\n * class myModel extends createModel {\r\n *   contructor() {\r\n *     super()\r\n *     // props \r\n *   }\r\n *   // new extended method\r\n *   myMethod(...args){\r\n *     this.list = args \r\n *   }\r\n * }\r\n *\r\n * const MyModel = new myModel()\r\n */\r\n\r\n// check two objects properties attribute kdata-id and return the value equality\r\nconst notEqual = function (a, b) {\r\n  return a['kdata-id'] !== b['kdata-id']\r\n}\r\n\r\nlet async = {}\r\n\r\n// We otimize component lifeCycle triggering by trottling the model batch updates\r\nconst inform = function (...args) {\r\n  if (async[this.mId]) clearTimeout(async[this.mId])\r\n  async[this.mId] = setTimeout(() =>\r\n    this.exec && typeof this.exec === 'function' && this.exec.apply(null, args)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * The model constructor, use with template literal having\r\n * ```{{model:<myModel>}}<myModelTemplateString>{{/model:<myModel>}}```\r\n * @alias module:keet/createModel\r\n * @param {*} enableFiltering - any truthy value \r\n *\r\n */\r\nexport default class createModel {\r\n  constructor (enableFiltering) {\r\n    this.mId = this.indentity\r\n\r\n    async[this.mId] = null\r\n    // if enableFiltering is assigned a value, model generation will\r\n    // use `listFilter` instead of `list`\r\n    this.enableFiltering = enableFiltering || null\r\n\r\n    this.model = []\r\n\r\n    // Register callback listener of any changes\r\n    Object.defineProperty(this, 'list', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return this.model\r\n      },\r\n      set: function (val) {\r\n        this.model = val\r\n        this.dirty = true\r\n        inform.call(this, this.model, this.listFilter)\r\n      }\r\n    })\r\n\r\n    // Register callback listener of any changes with filter\r\n    Object.defineProperty(this, 'listFilter', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return !this.prop ? this.model : this.model.filter(obj => obj[this.prop] === this.value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // set identity for this model\r\n  static get indentity () {\r\n    return minId()\r\n  }\r\n\r\n  /**\r\n   * Subscribe to the model changes, the function callback first argument\r\n   * is the ```model.list``` and the second argument is ```model.listFilter```\r\n   * @param {Function} fn - the function callback for the subscribe\r\n   */\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  /**\r\n   * Add new object to the model list\r\n   * @param {Object} obj - new object to add into the model list\r\n   */\r\n  add (obj) {\r\n    this.list = this.list.concat({ ...obj, 'kdata-id': minId() })\r\n  }\r\n\r\n  /**\r\n   * Update existing object in the model list\r\n   * @param {Object} updateObj - the updated properties\r\n   */\r\n  update (updateObj) {\r\n    this.list = this.list.map(obj =>\r\n      notEqual(obj, updateObj) ? obj : updateObj\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Filter the model data by selected properties, constructor\r\n   * instantiation should be apply with boolean true as argument\r\n   * to enable filtering\r\n   * @param {standard} prop - property of the object\r\n   * @param {standard} value - property value\r\n   */\r\n  filter (prop, value) {\r\n    this.prop = prop\r\n    this.value = value\r\n    this.list = this.list\r\n  }\r\n\r\n  /**\r\n * Removed existing object in the model list\r\n * @param {Object} destroyObj - the object ref to remove from the model\r\n */\r\n  destroy (destroyObj) {\r\n    this.list = this.list.filter(obj => {\r\n      return notEqual(obj, destroyObj)\r\n    })\r\n  }\r\n}","\r\n/**\r\n * Keetjs v4.0.0 Alpha release: https://github.com/keetjs/keet\r\n * Minimalist view layer for the web\r\n *\r\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Keetjs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n *\r\n * Copyright 2018, Shahrul Nizam Selamat\r\n * Released under the MIT License.\r\n */\r\n\r\nimport parseStr from './src/components/parseStr'\r\nimport { updateContext, morpher } from './src/components/genElement'\r\nimport { genId, assert, html } from './utils'\r\nimport createModel from './src/base/createModel'\r\nimport mount from './src/base/mount'\r\n\r\n// allow debugging using shorthand l and tr\r\nfunction debugMode() { \r\n  window.l = console.log.bind(console)\r\n  window.tr = console.trace.bind(console)\r\n}\r\n\r\ndebugMode()\r\n\r\n/**\r\n * @description\r\n * The main constructor of Keet\r\n */\r\nclass Keet {\r\n  constructor (name) {\r\n    this.ID = Keet.indentity\r\n    if(name){\r\n      this.storeRef(name)\r\n    }\r\n  }\r\n\r\n  // generate ID for the component\r\n  static get indentity () {\r\n    return genId()\r\n  }\r\n\r\n  mount (instance) {\r\n    return mount.call(this, instance)\r\n  }\r\n\r\n  link (id) {\r\n    // The target DOM where the rendering will took place.\r\n    if (!id) assert(id, 'No id is given as parameter.')\r\n    this.el = id\r\n    this.render()\r\n    return this\r\n  }\r\n\r\n  render (stub) {\r\n    // life-cycle method before rendering the component\r\n    if (this.componentWillMount && typeof this.componentWillMount === 'function') {\r\n      this.componentWillMount()\r\n    }\r\n\r\n    // Render this component to the target DOM\r\n    if (stub) {\r\n      this.IS_STUB = true\r\n    }\r\n    parseStr.call(this, stub)\r\n  }\r\n\r\n  callBatchPoolUpdate () {\r\n    // force component to update, if any state / non-state\r\n    // value changed DOM diffing will occur\r\n    updateContext.call(this, morpher, 1)\r\n  }\r\n  // pub-sub of the component, a component can subscribe to changes\r\n  // of another component, this is the subscribe method\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n  // pub-sub of the component, a component can subscribe to changes\r\n  // of another component, this is the publish method\r\n  inform (model) {\r\n    this.exec && typeof this.exec === 'function' && this.exec(model)\r\n  }\r\n\r\n  // store in global ref\r\n  storeRef (name){\r\n    window.__keetGlobalComponentRef__ = window.__keetGlobalComponentRef__ || {}\r\n    if(window.__keetGlobalComponentRef__[name]) {\r\n      assert(false, `The component name: ${name} already exist in the global pool.`)\r\n    } else {\r\n      window.__keetGlobalComponentRef__[name] = this\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Keet as default,\r\n  html,\r\n  createModel\r\n}\r\n"]}