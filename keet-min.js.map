{"version":3,"sources":["src2/utils.js","node_modules/string-hash/index.js","src2/v.js","src2/parser/construct.js","src2/parser/mount.js","src2/base/auto.js","src2/base/manifest.js","src2/patcher/diff.js","src2/base/generator.js","src2/base/set.js","src2/component.js","src2/createModel.js"],"names":["isEqualWith","a","b","c","isFunction","customizer","o","n","i","uniqueId","f","Math","random","toString","slice","isObject","_typeof","isBoolean","isString","isElement","Element","isArray","Array","isNumber","hash","str","length","charCodeAt","resolveVnode","component","Promise","resolve","intv","setInterval","vnode","clearInterval","VtreeRenderer","this","render","_ref","asyncToGenerator","regeneratorRuntime","mark","_callee","virtualNode","node","App","rootApp","wrap","_context","prev","next","elementName","id","el","setAttribute","__ref__","sent","appendChild","stop","apply","arguments","camelCase","s","replace","toLowerCase","styleToStr","obj","Object","keys","reduce","map","style","join","objAttrToStr","attr","trim","_this","document","createTextNode","element","createElement","attributes","forEach","argv","switchCase","attrCases","processAttr","concat","children","child","index","childCases","processChild","mount","_resolve","renderer","manifest","exec","props","state","defineProperty","enumerable","configurable","auto","call","isEqual","oldNode","newNode","isPristine","compare","isEqualNode","isIgnored","getAttribute","arbiter","nodeName","checked","value","setAttr","oAttr","output","name","iAttr","input","j","hasAttribute","removeAttribute","patch","nodeType","DOCUMENT_ELEMENT_TYPE","firstChild","diff","parentNode","replaceChild","nodeValue","getIndex","store","count","addExtra","oldParentNode","newStore","checkNew","nextSibling","push","checkOld","removeChild","diffNodes","getId","querySelector","IS_STUB","generator","batch","bind","set$1","update","assign","then","getElementById","assert","val","msg","Error","childLike","target","activatePubsub","prototype","subscribe","register","fn","unsubscribe","publish","shift","module","v","sources","defaultSource","selector","activeComponents","componentConstructorRender","Component","stringHash","batchUpdate","setState","onChange","match","indexOf","inline","addEventListener","className","default","_array","elemFn","elem","e","_function","_object","r","timer","delay","clearTimeout","setTimeout","Keet","set","notEqual","async","inform","_len","args","_key","mId","CreateModel","enableFiltering","genIdentity","model","get","dirty","listFilter","_this2","prop","filter","add","list","_extends","kdata-id","updateObj","destroy","destroyObj"],"mappings":"iCAmEA,SAASA,GAAYC,EAAGC,EAAGC,GACzB,MAAOC,GAAWD,IAAMA,EAAEF,EAAGC,GAG/B,QAASG,GAAWC,EAAGC,GACrB,IAAI,GAAIC,KAAKD,GACX,GAAGD,EAAEE,KAAOD,EAAEC,GACZ,OAAO,CAGX,QAAO,EAGT,QAASC,GAAUC,GACjB,OAAQA,EAAIA,EAAI,KAAuB,KAAhBC,KAAKC,UAAiBC,SAAS,IAAIC,MAAM,EAAG,GAGrE,QAASC,GAAST,GAAK,MAAoB,YAAb,SAAOA,EAAP,YAAAU,EAAOV,IACrC,QAASW,GAAUX,GAAK,MAAoB,iBAANA,GACtC,QAASY,GAASZ,GAAK,MAAoB,gBAANA,GACrC,QAASF,GAAWE,GAAK,MAAoB,kBAANA,GACvC,QAASa,GAAUb,GAAK,MAAOA,aAAac,SAC5C,QAASC,GAAQf,GAAK,MAAOA,aAAagB,OAC1C,QAASC,GAASjB,GAAK,MAAoB,gBAANA,GCxFrC,QAASkB,GAAKC,UACRD,GAAO,KACPhB,EAAOiB,EAAIC,OAETlB,KACW,GAAPgB,EAAaC,EAAIE,aAAanB,SAMjCgB,KAAS,ECXlB,QAASI,GAAcC,GACrB,MAAO,IAAIC,SAAQ,SAAAC,GACjB,GAAMC,GAAOC,YAAY,WACnBd,EAAUU,EAAUK,SACtBC,cAAcH,GACdD,EAAQF,EAAUK,SAEnB,KAIP,QAASE,KACPC,KAAKC,OAAL,WAAA,GAAAC,GAAAC,EAAAC,mBAAAC,KAAc,QAAAC,GAAgBC,EAAaC,GAA7B,GAAAC,GAAAC,EAAAb,CAAA,OAAAO,oBAAAO,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,IAAA,GAAA,MACNL,GAAMF,EAAYQ,YAElBL,EAAU,GAAID,GAEpBD,EAAKQ,GAAKN,EAAQO,GAAKT,EAAKQ,GAAKR,EAAKU,aAAa,SAAUR,EAAQS,QAAQH,IALjEJ,EAAAE,KAAA,EAOQvB,EAAamB,EAPrB,KAAA,GAONb,EAPMe,EAAAQ,KASZZ,EAAKa,YAAYxB,EATL,KAAA,GAAA,IAAA,MAAA,MAAAe,GAAAU,SAAAhB,EAAAN,QAAd,OAAA,YAAA,MAAAE,GAAAqB,MAAAvB,KAAAwB,eCVF,QAASC,GAAWC,EAAGzD,GACrB,MAAUyD,GAAEC,QAAQ,YAAa,OAAOC,cAAxC,IAAyD3D,EAAEyD,GAA3D,IAUF,QAASG,GAAYC,GACnB,MAAOC,QAAOC,KAAKF,GAAKG,OAAO,SAACrE,EAAGC,GAAJ,OAC1BD,EAAGC,GAAGqE,IAAI,SAAAC,GAAA,MAAA,GAAYV,EAAUU,EAAOL,KAAQM,KAAK,MAI3D,QAASC,GAAcP,GACrB,MAAOC,QAAOC,KAAKF,GAAKG,OAAO,SAACrE,EAAGC,GAAJ,OAC1BD,EAAGC,GAAGqE,IAAI,SAAAI,GAAA,MAAA,IAAWR,EAAIQ,GAAQA,EAAO,MAAMF,KAAK,KAAKG,KAAK,MC2EpE,QAAStC,GAAQM,GAAa,GAAAiC,GAAAxC,IAC5B,IAAInB,EAAS0B,IAAgBrB,EAASqB,GACpC,MAAOkC,UAASC,eAAenC,EAC1B,IAAG3B,EAAU2B,GAClB,MAAOkC,UAASC,eAAe,GAC1B,IAAGhE,EAAS6B,IAAgBxC,EAAWwC,EAAYQ,aAExD,MAAO0B,UAASC,eAAe,GAGjC,IAAMC,GAAUF,SAASG,cAAcrC,EAAYQ,YA+BnD,OA7BAgB,QAAOC,KAAKzB,EAAYsC,gBAAkBC,QAAQ,SAAAR,GAChD,GAAMS,IACJT,EACA/B,EAAYsC,WAAWP,GAGzBU,GAAWC,EAAW,WACpBC,EAAAA,MAAAA,OAAeH,IACfxB,MAAMiB,GAAOG,GAFfQ,OAE2BJ,OAG5BxC,EAAY6C,cAAgBN,QAAQ,SAACO,EAAOC,GAE3C,GAAGD,OAAAA,EAA+B,OAAO,CAIzC,IAAMN,IACJM,EACAV,EACA1C,EACAqD,EAGFN,GAAWO,EAAY,WACrBC,EAAAA,MAAAA,OAAgBT,IAChBxB,MAAMiB,EAAMO,KAGTJ,EAGT,QAASc,KACPzD,KAAKH,MAAQI,EAAOsB,MAAMvB,KAAMwB,WC5IlC,QAASkC,GAAUC,GACjB,MAAO,IAAIlE,SAAQ,SAAAC,GAAA,MACjB3B,GAAW4F,IAAajE,EAAQiE,KCFrB,QAAAC,GAAUC,EAAMC,GAC7B9D,KAAK8D,MAAQA,MACb9D,KAAK+D,MAAQ/D,KAAK+D,UAClB/D,KAAKmB,SAEHH,GAAI5C,IAEJyF,KAAAA,GAGF9B,OAAOiC,eAAehE,KAAM,WAAaiE,YAAY,EAAOC,cAAc,IAc1EC,EAAKC,KAAKpE,MCvBZ,QAASqE,GAASC,EAASC,GACzB,MACEC,GAAWF,EAASC,IACpBE,EAAQH,EAASC,IACjBD,EAAQI,YAAYH,GAIxB,QAASE,GAASH,EAASC,GACzB,MAAOI,GAAUL,IAAYK,EAAUJ,GAGzC,QAASI,GAAWnE,GAClB,MAA2C,OAApCA,EAAKoE,aAAa,eAG3B,QAASC,GAASP,EAASC,GACA,UAArBD,EAAQQ,WACRR,EAAQS,UAAYR,EAAQQ,UAC9BT,EAAQS,QAAUR,EAAQQ,SAGxBT,EAAQU,QAAUT,EAAQS,QAC5BV,EAAQU,MAAQT,EAAQS,QAI5B,QAASC,GAASX,EAASC,GAIzB,IAHA,GAAIW,GAAQX,EAAQ1B,WAChBsC,KACAhH,EAAI,EACDA,EAAI+G,EAAM7F,QACf8F,EAAOD,EAAM/G,GAAGiH,MAAQF,EAAM/G,GAAG6G,MACjC7G,GAKF,KAHA,GAAIkH,GAAQf,EAAQzB,WAChByC,KACAC,EAAI,EACDA,EAAIF,EAAMhG,QACfiG,EAAMD,EAAME,GAAGH,MAAQC,EAAME,GAAGP,MAChCO,GAEF,KAAK,GAAIjD,KAAQ6C,GACXb,EAAQzB,WAAWP,IAASgC,EAAQzB,WAAWP,GAAM8C,OAAS9C,GAAQgC,EAAQzB,WAAWP,GAAM0C,QAAUG,EAAO7C,GAClHgC,EAAQpD,aAAaoB,EAAM6C,EAAO7C,IAG7BgC,EAAQkB,aAAalD,IACxBgC,EAAQpD,aAAaoB,EAAM6C,EAAO7C,GAIxC,KAAK,GAAIA,KAAQgD,GAEXf,EAAQ1B,WAAWP,IAASgC,EAAQzB,WAAWP,IAEjDgC,EAAQmB,gBAAgBnD,GAK9B,QAASoD,GAAOpB,EAASC,GACvB,GAAID,EAAQqB,WAAapB,EAAQoB,SAC/B,GAAIrB,EAAQqB,WAAaC,EAAuB,CAG9C,GAFAf,EAAQP,EAASC,GAEbF,EAAQC,EAASC,KAAaA,EAAQsB,WACxC,MAEM,IAAIxB,EAAQC,EAASC,IAAYA,EAAQsB,WAE/C,WADAC,GAAKxB,EAAQuB,WAAYtB,EAAQsB,WAAYvB,EAG3CA,GAAQQ,WAAaP,EAAQO,SAC3BR,EAAQkB,aAAa,QAAUjB,EAAQiB,aAAa,OACtDlB,EAAQyB,WAAWC,aAAazB,EAASD,IAEzCW,EAAQX,EAASC,GACjBuB,EAAKxB,EAAQuB,WAAYtB,EAAQsB,WAAYvB,IAG/CA,EAAQyB,WAAWC,aAAazB,EAASD,OAGvCA,GAAQ2B,YAAc1B,EAAQ0B,YAChC3B,EAAQ2B,UAAY1B,EAAQ0B,eAIhC3B,GAAQyB,WAAWC,aAAazB,EAASD,GAI7C,QAAS4B,GAAUC,EAAOC,GACxB,MAAOD,GAAM9G,OAAS+G,EAAQ,EAGhC,QAASC,GAAUD,EAAOE,EAAeC,GAEvC,IADA,GAAIjD,GAAAA,OACG8C,EAAQ,GACbA,IACA9C,EAAQ4C,EAASK,EAAUH,GAC3BE,EAAcjF,YAAYkF,EAASjD,IAOvC,QAASwC,GAAMxB,EAASC,EAAS+B,GAI/B,IAHA,GAAIF,GAAQ,EACRG,KAEGhC,GACL6B,IACAI,EAAWjC,EACXA,EAAUA,EAAQkC,YAClBF,EAASG,KAAKF,EAGhB,IAAIlD,GAAAA,MAEJ,IAAKgB,EAIH,KAAOA,GACL8B,IACAO,GAAWrC,EACXA,EAAUA,EAAQmC,YAClBnD,EAAQ4C,EAASK,EAAUH,GACvBO,IAAYJ,EAASjD,GACvBoC,EAAMiB,GAAUJ,EAASjD,IAChBqD,KAAaJ,EAASjD,IAC/BgD,EAAcM,YAAYD,IAEZ,OAAZrC,GACF+B,EAASD,EAAOE,EAAeC,OAbnCF,GAASD,EAAOE,EAAeC,GAmBnC,QAAS/B,GAAYF,EAASC,GAG5B,MADID,IAASW,EAAQX,EAASC,GACvBA,EAAQiB,aAAa,kBAG9B,QAASqB,KACP,GAAIrG,GAAOsG,EAAM9G,KAAKiB,KAAOwB,SAASsE,cAAT,YAAmC/G,KAAKmB,QAAQH,GAAhD,KAEzBR,KAASR,KAAKmB,QAAQ6F,QACxBlB,EAAKtF,EAAKqF,WAAY7F,KAAKH,MAAOW,GACzBA,IAASgE,EAAW,KAAMxE,KAAKH,QACxCiG,EAAKtF,EAAKqF,WAAY7F,KAAKH,MAAMgG,WAAYrF,GCpJlC,QAAAyG,KACbC,GAAM9C,KAAKpE,KAAM8F,EAAKqB,KAAKnH,MAAO,GCRrB,QAAAoH,GAAUC,GACnB1J,EAAYqC,KAAK+D,MAAOsD,EAAQrJ,KACnC+D,OAAOuF,OAAOtH,KAAK+D,MAAOsD,GAC1BlD,EAAKC,KAAKpE,MAAMuH,KAAKN,EAAUE,KAAKnH,+4BTPjC8G,EAAQ,SAAA9F,GAAA,MAAMyB,UAAS+E,eAAexG,IAWtCyG,EAAS,SAACC,EAAKC,GACnB,IAAKD,EAAK,KAAUE,OAAM,UAAYD,IAQlCE,EAAY,WAChB,MAAO,UAAUC,GACXA,EAAO3G,UAAS2G,EAAO3G,QAAQ6F,SAAU,KAS3Ce,EAAiB,WACrB,MAAO,UAAUD,GAQfA,EAAOE,UAAUC,UAAY,SAAUC,EAAUC,GAG/C,MAFAV,GAAO1J,EAAWoK,GAAK,sCACvBnI,KAAKmB,QAAQ0C,KAAO7D,KAAKmB,QAAQ0C,KAAKqE,GAAYC,EAC3CD,GAQTJ,EAAOE,UAAUI,YAAc,SAAUF,SAChClI,MAAKmB,QAAQ0C,KAAKqE,IAQ3BJ,EAAOE,UAAUK,QAAU,WACzB,GAAMH,MAAcI,MAAMlE,KAAK5C,UAC/BzD,GAAWiC,KAAKmB,QAAQ0C,KAAKqE,KAAclI,KAAKmB,QAAQ0C,KAAKqE,GAAU3G,MAAM,KAAMC,cC9CzF+G,EAAiBpJ,ECcXqJ,EAAI,GAAIzI,GCHRiD,EAAa,SAACyF,EAASC,GAAV,MAA4B,UAAAC,GAAA,MAAYF,GAAQ1G,OAAOC,KAAKyG,GAASE,IAAaD,KAEjGE,KAEEC,EAAAA,WAAA,GAAA3I,GAAAC,EAAAC,mBAAAC,KAA6B,QAAAC,GAAgB+C,EAAOpC,EAAIhB,GAA3B,GAAA6I,GAAA9H,EAAAxB,EAAAK,CAAA,OAAAO,oBAAAO,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,IAAA,GAAA,GAE3BgI,EAAYzF,EAAMtC,YAIlBC,EAAK+H,EAAWD,GAAAA,GAEhBtJ,EAAYoJ,EAAiB5H,IAAO,GAAI8H,GAAUzF,EAAMR,YAEvD+F,EAAiB5H,KAMhBrD,EAAY6B,EAAUsE,MAAOT,EAAMR,YAAa7E,IAClD+D,OAAOuF,OAAO9H,EAAUsE,MAAOT,EAAMR,YACrCrD,EAAUwJ,gBAPZJ,EAAiB5H,GAAMxB,EAWzBA,EAAU2B,QAAQ6F,SAAU,GAGxBjJ,EAAWyB,EAAUyJ,UAzBM,CAAArI,EAAAE,KAAA,EAAA,OAAA,MAAAF,GAAAE,KAAA,EA2BTvB,EAAaC,EA3BJ,KAAA,GA2BvBK,EA3BuBe,EAAAQ,KAgC7BvB,EAAMqB,aAAa,cAAe,IAElCrB,EAAMmB,GAAKxB,EAAUyB,GAAKpB,EAAMmB,GAAKnB,EAAMqB,aAAa,SAAU1B,EAAU2B,QAAQH,IAEpFC,EAAGI,YAAYxB,GAEf9B,EAAWyB,EAAU0J,WAAa1J,EAAU0J,WAtCftI,EAAAE,KAAA,EAAA,MAAA,KAAA,IA0C7BG,EAAGI,YAAYpB,EAAOmE,KAAKpE,KAAMR,GA1CJ,KAAA,IAAA,IAAA,MAAA,MAAAoB,GAAAU,SAAAhB,EAAAN,QAA7B,OAAA,YAAA,MAAAE,GAAAqB,MAAAvB,KAAAwB,eCrBA0B,EAAc,SAACZ,EAAM0C,GACzB,OACW,UAAT1C,GAAoB5D,EAASsG,GAC7B1C,EAAK6G,MAAM,QAAUpL,EAAWiH,GACvB,cAAT1C,EACS,UAATA,GACA8G,SAAQ,IAGNnG,GAEJd,MAAO,SAAUlB,EAAIqB,EAAM0C,GACzB/D,EAAGC,aAAaoB,EAAMT,EAAWmD,KAGnCqE,OAAQ,SAAUpI,EAAIqB,EAAM0C,GAC1B/D,EAAGqI,iBAAiBhH,EAAKX,QAAQ,MAAO,IAAKqD,EAAMmC,KAAKnH,OAAO,IAGjEuJ,UAAW,SAAUtI,EAAIqB,EAAM0C,GAC7B/D,EAAGC,aAAa,QAAS8D,IAG3BA,MAAO,SAAU/D,EAAIqB,EAAM0C,GACzB/D,EAAG+D,MAAQA,GAGbwE,QAAS,SAAUvI,EAAIqB,EAAM0C,GACxBtG,EAASsG,GACV3C,EAAa2C,GAAS/D,EAAGC,aAAaoB,EAAMD,EAAa2C,IAAU,KAEnEA,EAAQpG,EAAUoG,GAAU/D,EAAGC,aAAaoB,EAAM,IAAMrB,EAAGC,aAAaoB,EAAM0C,GAAS,OAKvFxB,EAAe,SAAAH,GACnB,OACErE,EAAQqE,GACRA,EAAMtC,aAAehD,EAAWsF,EAAMtC,aACtCsC,EAAMtC,aAAerC,EAAS2E,EAAMtC,cACpCqI,SAAQ,IAGN7F,GAEJkG,OAAQ,SAAUpG,EAAOpC,GAEvBoC,EAAMnB,IAAI,SAAApE,GAUR,GAAGC,EAAWD,EAAEiD,aAAa,CAE3B,MAAO,KAAI2I,EADE5L,EAAEiD,aACGjD,EAAE+E,eAErBX,IAAI,SAAAyH,GAELpK,EAAaoK,GAAMpC,KAAK,SAAAqC,GACtB3I,EAAGI,YAAYuI,QAKrBC,UAAWhB,EAEXiB,QAAS,SAAUzG,EAAOpC,GACxBA,EAAGI,YAAYpB,EAAOmE,KAAKpE,KAAMqD,EAAMtC,eAGzCyI,QAAS,SAAUnG,EAAOpC,GACxBA,EAAGI,YAAYpB,EAAOmE,KAAKpE,KAAMqD,MC7ErCc,EAAAhE,EAAAC,mBAAAC,KAAe,QAAAC,KAAA,GAAAyJ,EAAA,OAAA3J,oBAAAO,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,IAAA,GAAA,MAAAF,GAAAE,KAAA,EAIG4C,EAAS1D,KAAKC,OAJjB,KAAA,GAIP8J,EAJOnJ,EAAAQ,KAMbqC,EAAMW,KACJpE,KACA+J,EAAE3F,KAAKpE,MARI,KAAA,GAAA,IAAA,MAAA,MAAAY,GAAAU,SAAAhB,EAAAN,SERT4F,EAAwB,EA4G1BY,EAAAA,OACAG,GAAAA,OC7GAqD,MAEE9C,GAAQ,SAAUiB,EAAI8B,GAC1B,GAAM9L,GAAI6B,KAAKmB,QAAQH,EACvBgJ,IAAM7L,GAAK6L,GAAM7L,IAAM,KACvB+L,aAAaF,GAAM7L,IACnB6L,GAAM7L,GAAKgM,WAAWhC,EAAGhB,KAAKnH,MAAOiK,IE8BlBG,GAAAA,WACnB,QAAAA,GAAatG,GACXF,EAASQ,KAAKpE,QAAU8D,sBAO1BmF,SAAAA,WACEoB,EAAI9I,MAAMvB,KAAMwB,wBAMlBwH,YAAAA,WACE7E,EAAKC,KAAKpE,MAAMuH,KAAKN,EAAUE,KAAKnH,aCjClCsK,GAAW,SAAU1M,EAAGC,GAC5B,MAAOD,GAAE,cAAgBC,EAAE,aAGzB0M,MAGEC,GAAS,WAAmB,IAAA,GAAAhI,GAAAxC,KAAAyK,EAAAjJ,UAAAnC,OAANqL,EAAMzL,MAAAwL,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAAnJ,UAAAmJ,EAC5BJ,IAAMvK,KAAK4K,MAAMV,aAAaK,GAAMvK,KAAK4K,MAC7CL,GAAMvK,KAAK4K,KAAOT,WAAW,WAAA,MAC3B3H,GAAKqB,MAA6B,kBAAdrB,GAAKqB,MAAuBrB,EAAKqB,KAAKtC,MAAM,KAAMmJ,IACpE,IAUeG,GAAAA,WACnB,QAAAA,GAAaC,GACX9K,KAAK4K,IAAMC,EAAYE,YAEvBR,GAAMvK,KAAK4K,KAAO,KAGlB5K,KAAK8K,gBAAkBA,GAAmB,KAE1C9K,KAAKgL,SAGLjJ,OAAOiC,eAAehE,KAAM,QAC1BiE,YAAY,EACZC,cAAc,EACd+G,IAAK,WACH,MAAOjL,MAAKgL,OAEdX,IAAK,SAAU3C,GACb1H,KAAKgL,MAAQtD,EACb1H,KAAKkL,OAAQ,EACbV,GAAOpG,KAAKpE,KAAMA,KAAKgL,MAAOhL,KAAKmL,eAKvCpJ,OAAOiC,eAAehE,KAAM,cAC1BiE,YAAY,EACZC,cAAc,EACd+G,IAAK,WAAY,GAAAG,GAAApL,IACf,OAAQA,MAAKqL,KAAoBrL,KAAKgL,MAAMM,OAAO,SAAAxJ,GAAA,MAAOA,GAAIsJ,EAAKC,QAAUD,EAAKpG,QAA9DhF,KAAKgL,4BAe/B/C,UAAAA,SAAWE,GACTnI,KAAK6D,KAAOsE,eAOdoD,IAAAA,SAAKzJ,GACH9B,KAAKwL,KAAOxL,KAAKwL,KAAKrI,OAAVsI,KAAsB3J,GAAK4J,WAAYtN,EAAS,0BAO9DiJ,OAAAA,SAAQsE,GACN3L,KAAKwL,KAAOxL,KAAKwL,KAAKtJ,IAAI,SAAAJ,GAAA,MACxBwI,IAASxI,EAAK6J,GAAa7J,EAAM6J,iBAWrCL,OAAAA,SAAQD,EAAMrG,GACZhF,KAAKqL,KAAOA,EACZrL,KAAKgF,MAAQA,EACbhF,KAAKwL,KAAOxL,KAAKwL,kBAOnBI,QAAAA,SAASC,GACP7L,KAAKwL,KAAOxL,KAAKwL,KAAKF,OAAO,SAAAxJ,GAC3B,MAAOwI,IAASxI,EAAK+J,kDAjDvB,MAAOzN,GAAS","file":"keet-min.js","sourcesContent":["const getId = id => document.getElementById(id)\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Confirm that a value is truthy, throws an error message otherwise.\r\n *\r\n * @param {*} val - the val to test.\r\n * @param {string} msg - the error message on failure.\r\n * @throws {Error}\r\n */\r\nconst assert = (val, msg) => {\r\n  if (!val) throw new Error('(keet) ' + msg)\r\n}\r\n\r\n/**\r\n * @private\r\n * @decorator\r\n * Add checking for child component\r\n */\r\nconst childLike = function () {\r\n  return function (target) {\r\n    if (target.__ref__) target.__ref__.IS_STUB = true\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @decorator\r\n * Add internal pub/sub to component\r\n */\r\nconst activatePubsub = function () {\r\n  return function (target) {\r\n\r\n    /**\r\n     * Another component can subscribe to changes on this component.\r\n     * This is the subscribe method\r\n     * @param {String} register - the callback function identifier name\r\n     * @param {Function} fn - the callback function for the subscribe\r\n     */\r\n    target.prototype.subscribe = function (register, fn) {\r\n      assert(isFunction(fn), 'Second argument is not a function.')\r\n      this.__ref__.exec = this.__ref__.exec[register] = fn\r\n      return register\r\n    }\r\n\r\n    /**\r\n     * Another component can subscribe to changes on this component.\r\n     * This is the unsubscribe method\r\n     * @param {Integer} register - the register index identifier\r\n     */\r\n    target.prototype.unsubscribe = function (register) {\r\n      delete this.__ref__.exec[register]\r\n    }\r\n\r\n    /**\r\n     * Another component can subscribe to changes on this component.\r\n     * This is the publish method\r\n     * @param {...*} value - one or more parameters to publish to subscribers\r\n     */\r\n    target.prototype.publish = function () {\r\n      const register = [].shift.call(arguments)\r\n      isFunction(this.__ref__.exec[register]) && this.__ref__.exec[register].apply(null, arguments)\r\n    }\r\n  }\r\n}\r\n\r\nfunction isEqualWith(a, b, c){\r\n  return isFunction(c) && c(a, b)\r\n}\r\n\r\nfunction customizer(o, n) {\r\n  for(let i in n) {\r\n    if(o[i] !== n[i]){\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction uniqueId (f) {\r\n  return (f ? f : '') + (Math.random() * 1e17).toString(36).slice(0, 4)\r\n}\r\n\r\nfunction isObject(o) { return typeof o === 'object' }\r\nfunction isBoolean(o) { return typeof o === 'boolean' }\r\nfunction isString(o) { return typeof o === 'string' }\r\nfunction isFunction(o) { return typeof o === 'function' }\r\nfunction isElement(o) { return o instanceof Element }\r\nfunction isArray(o) { return o instanceof Array }\r\nfunction isNumber(o) { return typeof o === 'number' }\r\n\r\nexport {\r\n  assert,\r\n  getId,\r\n  childLike,\r\n  activatePubsub,\r\n  isEqualWith,\r\n  customizer,\r\n  isObject,\r\n  isBoolean,\r\n  isString,\r\n  isFunction,\r\n  isElement,\r\n  uniqueId,\r\n  isArray,\r\n  isNumber\r\n}\r\n","\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n","import { isElement, isFunction } from './utils'\r\n\r\nfunction resolveVnode (component) {\r\n  return new Promise(resolve => {\r\n    const intv = setInterval(() => {\r\n      if (isElement(component.vnode)) {\r\n        clearInterval(intv)\r\n        resolve(component.vnode)\r\n      }\r\n    }, 0)\r\n  })\r\n}\r\n\r\nfunction VtreeRenderer () {\r\n  this.render = async function (virtualNode, node) {\r\n    const App = virtualNode.elementName\r\n\r\n    const rootApp = new App()\r\n\r\n    node.id ? rootApp.el = node.id : node.setAttribute('k-data', rootApp.__ref__.id)\r\n\r\n    const vnode = await resolveVnode(rootApp)\r\n\r\n    node.appendChild(vnode)\r\n\r\n    // detect changes\r\n    // isFunction(rootApp.onChange) && rootApp.onChange()\r\n  }\r\n}\r\n\r\nconst v = new VtreeRenderer()\r\n\r\nexport {\r\n  v as default,\r\n  resolveVnode\r\n}\r\n","import stringHash from 'string-hash'\r\nimport { resolveVnode } from '../v'\r\nimport { isFunction, isEqualWith, customizer } from '../utils'\r\n\r\nfunction camelCase (s, o) {\r\n  return `${s.replace(/([A-Z]+)/g, '-$1').toLowerCase()}:${o[s]};`\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Convert style object into string\r\n *\r\n * @param {Object} style - the style as javascript object\r\n */\r\nfunction styleToStr (obj) {\r\n  return Object.keys(obj).reduce((a, b) =>\r\n      [a, b].map(style => `${camelCase(style, obj)}`).join('')\r\n    )\r\n}\r\n\r\nfunction objAttrToStr (obj) {\r\n  return Object.keys(obj).reduce((a, b) =>\r\n      [a, b].map(attr => `${obj[attr] ? attr : ''}`).join(' ').trim('')\r\n    )\r\n}\r\n\r\nconst switchCase = (sources, defaultSource) => selector => sources[Object.keys(sources)[selector] || defaultSource]\r\n\r\nlet activeComponents = {}\r\n\r\nconst componentConstructorRender = async function (child, el, render, index) {\r\n\r\n    let Component = child.elementName\r\n\r\n    // console.log([Component], index, stringHash(Component.toString()))\r\n\r\n    let id = stringHash(Component.toString())\r\n\r\n    let component = activeComponents[id] || new Component(child.attributes)\r\n\r\n    if (!activeComponents[id]) {\r\n      activeComponents[id] = component\r\n    } else {\r\n      // reassign established component props\r\n      // and do batch update on itself\r\n      // TODO: add dirty checking before batch update\r\n      if(!isEqualWith(component.props, child.attributes), customizer) {\r\n        Object.assign(component.props, child.attributes)\r\n        component.batchUpdate()\r\n      }\r\n    }\r\n\r\n    component.__ref__.IS_STUB = true\r\n\r\n    // component from constructor class\r\n    if (isFunction(component.setState)) {\r\n      // wait for component virtualNode to render\r\n      const vnode = await resolveVnode(component)\r\n\r\n      // console.log(vnode)\r\n\r\n      // DOM patcher respectively will ignore childNodes\r\n      vnode.setAttribute('data-ignore', '')\r\n\r\n      vnode.id ? component.el = vnode.id : vnode.setAttribute('k-data', component.__ref__.id)\r\n\r\n      el.appendChild(vnode)\r\n      // caller to detect changes\r\n      isFunction(component.onChange) && component.onChange()\r\n\r\n    // component from function\r\n    } else {\r\n      el.appendChild(render.call(this, component))\r\n    }\r\n  }\r\n\r\nexport {\r\n  styleToStr,\r\n  objAttrToStr,\r\n  switchCase,\r\n  componentConstructorRender\r\n}","import { isFunction, isObject, isString, isNumber, isArray, isBoolean } from '../utils'\r\nimport {\r\n  styleToStr,\r\n  objAttrToStr,\r\n  switchCase,\r\n  componentConstructorRender\r\n} from './construct'\r\n\r\nimport { resolveVnode } from '../v'\r\n\r\nconst processAttr = (attr, value) => {\r\n  return [\r\n    attr === 'style' && isObject(value),\r\n    attr.match(/^on/) && isFunction(value),\r\n    attr === 'className',\r\n    attr === 'value'\r\n  ].indexOf(true)\r\n}\r\n\r\nconst attrCases = {\r\n  // style as js object also resolve camelcase naming\r\n  style: function (el, attr, value) {\r\n    el.setAttribute(attr, styleToStr(value))\r\n  },\r\n  // inline eventListener conversion to scoped listener\r\n  inline: function (el, attr, value) {\r\n    el.addEventListener(attr.replace(/^on/, ''), value.bind(this), false)\r\n  },\r\n  // convert react className to standard class\r\n  className: function (el, attr, value) {\r\n    el.setAttribute('class', value)\r\n  },\r\n  // pass value to element value instead as attribute\r\n  value: function (el, attr, value) {\r\n    el.value = value\r\n  },\r\n  // default attributes assignment\r\n  default: function (el, attr, value) {\r\n    if(isObject(value)) {\r\n      objAttrToStr(value) ? el.setAttribute(attr, objAttrToStr(value)) : null\r\n    } else {\r\n      value ? isBoolean(value) ?  el.setAttribute(attr, '') : el.setAttribute(attr, value) : null\r\n    }\r\n  }\r\n}\r\n\r\nconst processChild = child => {\r\n  return [\r\n    isArray(child),\r\n    child.elementName && isFunction(child.elementName),\r\n    child.elementName && isObject(child.elementName)\r\n  ].indexOf(true)\r\n}\r\n\r\nconst childCases = {\r\n  // child is array of nodes\r\n  _array: function (child, el) {\r\n\r\n    child.map(c => {\r\n      // console.log(c)\r\n      // if(isArray(c)) {\r\n      //   console.log(c)\r\n      //   childCases._array.call(this, c)\r\n      // } else {\r\n      //   switchCase(childCases, 'default')(\r\n      //     processChild(c)\r\n      //   ).call(this, c, el)\r\n      // }\r\n      if(isFunction(c.elementName)){\r\n        let elemFn = c.elementName\r\n        return new elemFn(c.attributes)\r\n      }\r\n    }).map(elem => {\r\n      // console.log(elem)\r\n      resolveVnode(elem).then(e => {\r\n        el.appendChild(e)\r\n      })\r\n    })\r\n\r\n  },\r\n  _function: componentConstructorRender,\r\n  // component from object\r\n  _object: function (child, el) {\r\n    el.appendChild(render.call(this, child.elementName))\r\n  },\r\n  // default render operation\r\n  default: function (child, el) {\r\n    el.appendChild(render.call(this, child))\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Mount a virtualNode\r\n *\r\n * @param {String|Object} virtualNode - the transform code\r\n */\r\nfunction render (virtualNode) {\r\n  if (isString(virtualNode) || isNumber(virtualNode)) {\r\n    return document.createTextNode(virtualNode)\r\n  } else if(isBoolean(virtualNode)) {\r\n    return document.createTextNode('')\r\n  } else if(isObject(virtualNode) && isFunction(virtualNode.elementName)) {\r\n    // console.trace(virtualNode)\r\n    return document.createTextNode('') //componentConstructorRender\r\n  }\r\n\r\n  const element = document.createElement(virtualNode.elementName)\r\n\r\n  Object.keys(virtualNode.attributes || {}).forEach(attr => {\r\n    const argv = [\r\n      attr,\r\n      virtualNode.attributes[attr]\r\n    ]\r\n\r\n    switchCase(attrCases, 'default')(\r\n      processAttr(...argv)\r\n    ).apply(this, [element, ...argv])\r\n  });\r\n\r\n  (virtualNode.children || []).forEach((child, index) => {\r\n\r\n    if(child === (undefined || null)) return false\r\n    // if(child.elementName && child.elementName === 'li' && child.elementName === 'li'){\r\n      // console.log(child)\r\n    // }\r\n    const argv = [\r\n      child,\r\n      element,\r\n      render,\r\n      index\r\n    ]\r\n\r\n    switchCase(childCases, 'default')(\r\n      processChild(...argv)\r\n    ).apply(this, argv)\r\n  })\r\n\r\n  return element\r\n}\r\n\r\nfunction mount () {\r\n  this.vnode = render.apply(this, arguments)\r\n  // console.log(this.state)\r\n}\r\n\r\nexport default mount\r\n","import { isFunction } from '../utils'\r\nimport mount from '../parser/mount'\r\n\r\nfunction _resolve (renderer) {\r\n  return new Promise(resolve =>\r\n    isFunction(renderer) && resolve(renderer)\r\n  )\r\n}\r\n\r\n// auto rendered on class constructor instantiation\r\nexport default async function () {\r\n  // caller to tell incoming changes\r\n  // isFunction(this.willChange) && this.willChange()\r\n\r\n  const r = await _resolve(this.render)\r\n\r\n  mount.call(\r\n    this,\r\n    r.call(this)\r\n  )\r\n}\r\n","import { uniqueId } from '../utils'\r\nimport auto from './auto'\r\n\r\nexport default function (exec, props) {\r\n  this.props = props || {}\r\n  this.state = this.state || {}\r\n  this.__ref__ = {\r\n    // generate id for this component\r\n    id: uniqueId(),\r\n    // pubsub callback storage\r\n    exec\r\n  }\r\n\r\n  Object.defineProperty(this, '__ref__', { enumerable: false, configurable: true })\r\n\r\n  // Object.defineProperty(this, 'render', { \r\n  //   get: function(){\r\n  //     let args = [].slice.call(arguments)\r\n  //     return function(args){\r\n  //       console.log(args)\r\n  //     }\r\n  //   },\r\n  //   set: function(){\r\n  //     console.log([].slice.call(arguments))\r\n  //   }\r\n  // })\r\n\r\n  auto.call(this)\r\n}\r\n","import { getId } from '../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nfunction isEqual (oldNode, newNode) {\r\n  return (\r\n    isPristine(oldNode, newNode) ||\r\n    compare(oldNode, newNode) ||\r\n    oldNode.isEqualNode(newNode)\r\n  )\r\n}\r\n\r\nfunction compare (oldNode, newNode) {\r\n  return isIgnored(oldNode) && isIgnored(newNode)\r\n}\r\n\r\nfunction isIgnored (node) {\r\n  return node.getAttribute('data-ignore') != null\r\n}\r\n\r\nfunction arbiter (oldNode, newNode) {\r\n  if (oldNode.nodeName !== 'INPUT') return\r\n  if (oldNode.checked !== newNode.checked) {\r\n    oldNode.checked = newNode.checked\r\n  }\r\n  // added method to check explicit node value and compare them\r\n  if (oldNode.value !== newNode.value) {\r\n    oldNode.value = newNode.value\r\n  }\r\n}\r\n\r\nfunction setAttr (oldNode, newNode) {\r\n  let oAttr = newNode.attributes\r\n  let output = {}\r\n  let i = 0\r\n  while (i < oAttr.length) {\r\n    output[oAttr[i].name] = oAttr[i].value\r\n    i++\r\n  }\r\n  let iAttr = oldNode.attributes\r\n  let input = {}\r\n  let j = 0\r\n  while (j < iAttr.length) {\r\n    input[iAttr[j].name] = iAttr[j].value\r\n    j++\r\n  }\r\n  for (let attr in output) {\r\n    if (oldNode.attributes[attr] && oldNode.attributes[attr].name === attr && oldNode.attributes[attr].value !== output[attr]) {\r\n      oldNode.setAttribute(attr, output[attr])\r\n    } else {\r\n      // add new attributes\r\n      if (!oldNode.hasAttribute(attr)) {\r\n        oldNode.setAttribute(attr, output[attr])\r\n      }\r\n    }\r\n  }\r\n  for (let attr in input) {\r\n    // if attributes does not exist on the new node we removed it from the old node\r\n    if (newNode.attributes[attr] && oldNode.attributes[attr]) {\r\n    } else {\r\n      oldNode.removeAttribute(attr)\r\n    }\r\n  }\r\n}\r\n\r\nfunction patch (oldNode, newNode) {\r\n  if (oldNode.nodeType === newNode.nodeType) {\r\n    if (oldNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      arbiter(oldNode, newNode)\r\n      // exit on equal and newNode having no children\r\n      if (isEqual(oldNode, newNode) && !newNode.firstChild) {\r\n        return\r\n      // diff children on equal and subsequently exit current execution\r\n      } else  if (isEqual(oldNode, newNode) && newNode.firstChild) {\r\n        diff(oldNode.firstChild, newNode.firstChild, oldNode)\r\n        return\r\n      }\r\n      if (oldNode.nodeName === newNode.nodeName) {\r\n        if (oldNode.hasAttribute('key') && newNode.hasAttribute('key')) {\r\n          oldNode.parentNode.replaceChild(newNode, oldNode)\r\n        } else {\r\n          setAttr(oldNode, newNode)\r\n          diff(oldNode.firstChild, newNode.firstChild, oldNode)\r\n        }\r\n      } else {\r\n        oldNode.parentNode.replaceChild(newNode, oldNode)\r\n      }\r\n    } else {\r\n      if (oldNode.nodeValue !== newNode.nodeValue) {\r\n        oldNode.nodeValue = newNode.nodeValue\r\n      }\r\n    }\r\n  } else {\r\n    oldNode.parentNode.replaceChild(newNode, oldNode)\r\n  }\r\n}\r\n\r\nfunction getIndex (store, count) {\r\n  return store.length - count - 1\r\n}\r\n\r\nfunction addExtra (count, oldParentNode, newStore) {\r\n  let index\r\n  while (count > 0) {\r\n    count--\r\n    index = getIndex(newStore, count)\r\n    oldParentNode.appendChild(newStore[index])\r\n  }\r\n}\r\n\r\nlet checkNew\r\nlet checkOld\r\n\r\nfunction diff (oldNode, newNode, oldParentNode) {\r\n  let count = 0\r\n  let newStore = []\r\n\r\n  while (newNode) {\r\n    count++\r\n    checkNew = newNode\r\n    newNode = newNode.nextSibling\r\n    newStore.push(checkNew)\r\n  }\r\n\r\n  let index\r\n\r\n  if (!oldNode) {\r\n    // if oldNode is null process newNode\r\n    addExtra(count, oldParentNode, newStore)\r\n  } else {\r\n    while (oldNode) {\r\n      count--\r\n      checkOld = oldNode\r\n      oldNode = oldNode.nextSibling\r\n      index = getIndex(newStore, count)\r\n      if (checkOld && newStore[index]) {\r\n        patch(checkOld, newStore[index])\r\n      } else if (checkOld && !newStore[index]) {\r\n        oldParentNode.removeChild(checkOld)\r\n      }\r\n      if (oldNode === null) {\r\n        addExtra(count, oldParentNode, newStore)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isPristine (oldNode, newNode) {\r\n  // only setup attributes, but ignore all children changes\r\n  if (oldNode) setAttr(oldNode, newNode)\r\n  return newNode.hasAttribute('pristine-model')\r\n}\r\n\r\nfunction diffNodes () {\r\n  let node = getId(this.el) || document.querySelector(`[k-data=\"${this.__ref__.id}\"]`)\r\n  // console.trace('diff')\r\n  if (node && !this.__ref__.IS_STUB) {\r\n    diff(node.firstChild, this.vnode, node)\r\n  } else if (node && !isPristine(null, this.vnode)) {\r\n    diff(node.firstChild, this.vnode.firstChild, node)\r\n  }\r\n}\r\n\r\nexport default diffNodes\r\n","import diff from '../patcher/diff'\r\n\r\nlet timer = {}\r\n\r\nconst batch = function (fn, delay) {\r\n  const i = this.__ref__.id\r\n  timer[i] = timer[i] || null\r\n  clearTimeout(timer[i])\r\n  timer[i] = setTimeout(fn.bind(this), delay)\r\n}\r\n\r\nexport default function () {\r\n  batch.call(this, diff.bind(this), 1)\r\n}\r\n","import { isEqual, isEqualWith, customizer } from '../utils'\r\nimport auto from './auto'\r\nimport generator from './generator'\r\n\r\nexport default function (update) {\r\n  if(!isEqualWith(this.state, update, customizer)) {\r\n  \tObject.assign(this.state, update)\r\n  \tauto.call(this).then(generator.bind(this))\r\n  }\r\n}\r\n","\r\n//\r\n// Keetjs v5.0.0-meta https://github.com/keetjs/keet\r\n// Minimalist view layer for the web\r\n//\r\n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Keetjs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n//\r\n// Copyright 2019, Shahrul Nizam Selamat\r\n// Released under the MIT License.\r\n//\r\n\r\n/**\r\n * @module keet\r\n * @example\r\n * import { Component } from 'keet'\r\n *\r\n * class App extends Component {\r\n *   contructor() {\r\n *     super()\r\n *     // props\r\n *   }\r\n *   // new extended method\r\n *   myMethod(...args){\r\n *     //\r\n *   }\r\n * }\r\n *\r\n * const app = new App()\r\n */\r\n\r\nimport manifest from './base/manifest'\r\nimport auto from './base/auto'\r\nimport set from './base/set'\r\nimport generator from './base/generator'\r\n\r\n/**\r\n * The main constructor of Keet\r\n */\r\nexport default class Keet {\r\n  constructor (props) {\r\n    manifest.call(this, {}, props)\r\n  }\r\n\r\n  /**\r\n   * Methods to update data to the virtual DOM template\r\n   * @param {Object} instance - the data to update\r\n   */\r\n  setState () {\r\n    set.apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * Recheck all props if anything changed, diffing will occurs.\r\n   */\r\n  batchUpdate () {\r\n    auto.call(this).then(generator.bind(this))\r\n  }\r\n}\r\n","import { uniqueId } from './utils'\r\n\r\n/**\r\n * @module keet/CreateModel\r\n * @example\r\n * import { CreateModel } from 'keet'\r\n *\r\n * class myModel extends CreateModel {\r\n *   contructor() {\r\n *     super()\r\n *     // props\r\n *   }\r\n *   // new extended method\r\n *   myMethod(...args){\r\n *     this.list = args\r\n *   }\r\n * }\r\n *\r\n * const MyModel = new myModel()\r\n */\r\n\r\n// check two objects properties attribute kdata-id and return the value equality\r\nconst notEqual = function (a, b) {\r\n  return a['kdata-id'] !== b['kdata-id']\r\n}\r\n\r\nlet async = {}\r\n\r\n// We otimize component lifeCycle triggering by trottling the model batch updates\r\nconst inform = function (...args) {\r\n  if (async[this.mId]) clearTimeout(async[this.mId])\r\n  async[this.mId] = setTimeout(() =>\r\n    this.exec && typeof this.exec === 'function' && this.exec.apply(null, args)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * The model constructor, use with template literal having\r\n * ```{{model:<myModel>}}<myModelTemplateString>{{/model:<myModel>}}```\r\n * @alias module:keet/createModel\r\n * @param {*} enableFiltering - any truthy value\r\n *\r\n */\r\nexport default class CreateModel {\r\n  constructor (enableFiltering) {\r\n    this.mId = CreateModel.genIdentity\r\n\r\n    async[this.mId] = null\r\n    // if enableFiltering is assigned a value, model generation will\r\n    // use `listFilter` instead of `list`\r\n    this.enableFiltering = enableFiltering || null\r\n\r\n    this.model = []\r\n\r\n    // Register callback listener of any changes\r\n    Object.defineProperty(this, 'list', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return this.model\r\n      },\r\n      set: function (val) {\r\n        this.model = val\r\n        this.dirty = true\r\n        inform.call(this, this.model, this.listFilter)\r\n      }\r\n    })\r\n\r\n    // Register callback listener of any changes with filter\r\n    Object.defineProperty(this, 'listFilter', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return !this.prop ? this.model : this.model.filter(obj => obj[this.prop] === this.value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // set identity for this model\r\n  static get genIdentity () {\r\n    return uniqueId('model-')\r\n  }\r\n\r\n  /**\r\n   * Subscribe to the model changes, the function callback first argument\r\n   * is the ```model.list``` and the second argument is ```model.listFilter```\r\n   * @param {Function} fn - the function callback for the subscribe\r\n   */\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  /**\r\n   * Add new object to the model list\r\n   * @param {Object} obj - new object to add into the model list\r\n   */\r\n  add (obj) {\r\n    this.list = this.list.concat({ ...obj, 'kdata-id': uniqueId('mdata-') })\r\n  }\r\n\r\n  /**\r\n   * Update existing object in the model list\r\n   * @param {Object} updateObj - the updated properties\r\n   */\r\n  update (updateObj) {\r\n    this.list = this.list.map(obj =>\r\n      notEqual(obj, updateObj) ? obj : updateObj\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Filter the model data by selected properties, constructor\r\n   * instantiation should be apply with boolean true as argument\r\n   * to enable filtering\r\n   * @param {string} prop - property of the object\r\n   * @param {Object|string|number|Boolean} value - property value\r\n   */\r\n  filter (prop, value) {\r\n    this.prop = prop\r\n    this.value = value\r\n    this.list = this.list\r\n  }\r\n\r\n  /**\r\n * Removed existing object in the model list\r\n * @param {Object} destroyObj - the object ref to remove from the model\r\n */\r\n  destroy (destroyObj) {\r\n    this.list = this.list.filter(obj => {\r\n      return notEqual(obj, destroyObj)\r\n    })\r\n  }\r\n}\r\n"]}