{"version":3,"sources":["src/components/templateParse/updateState.js","src/components/genModelList.js","src/components/conditionalNodes.js","src/components/templateParse/conditionalCache.js","src/components/componentParse.js","src/base/svgHandler.js","src/base/clear.js","src/base/mountToFragment.js","src/components/ternaryOps.js","src/components/genModelTemplate.js","src/components/svgParse.js","src/components/templateParse/replaceCommentBlock.js","src/components/templateParse/valAssign.js","src/components/templateParse/replaceHandleBars.js","src/components/templateParse/inspectAttributes.js","src/components/templateParse/addEvent.js","src/components/templateParse/reconcile.js","src/components/templateParse/diffNodes.js","src/components/genElement.js","src/components/parseStr.js","src/base/mount.js","utils.js","src/components/strInterpreter.js","src/base/createModel.js","keet.js"],"names":["updateState","state","updateStateList","removeProtoModel","node","id","p","getElementById","childNodes","remove","genModelList","model","reconcile","modelList","i","listClone","parentNode","list","listArg","mLength","cache","this","enableFiltering","nextSibling","cloneNode","__pristineFragment__","undefined","hasOwnProperty","nodeType","DOCUMENT_FRAGMENT_TYPE","getId","el","dirty","setAttribute","length","call","insertBefore","lastChild","catchNode","start","cNode","DOCUMENT_ELEMENT_TYPE","isEqualNode","firstChild","checkHasModel","conditional","DOCUMENT_COMMENT_TYPE","nodeValue","match","modelRaw","trim","re","models","concat","resolveConditionalNodes","setup","runner","addState","_this","currentNode","fetchFrag","frag","document","createDocumentFragment","map","conditionalNodesRawEnd","appendChild","check","conditionalNodesRawStart","reConditional","nodes","conditionalCache","base","bind","conditionalNodes","getKeetGlobalComponent","component","window","babelHelpers.typeof","__keetGlobalComponentRef__","index","c","identifier","indexOf","componentParse","componentStr","replace","cacheInit","ID","replaceChild","callBatchPoolUpdate","cycleVirtualDomTree","assert","parseSVG","svgList","svgRe","IS_SVG","ls","minId","svgData","clear","f","DOCUMENT_TEXT_TYPE","mountToFragment","tempDiv","createElement","innerHTML","ternaryOps","input","t","split","condition","leftHand","rightHand","value","test","genModelTemplate","string","obj","arrProps","tmpl","len","rep","isTernary","isObjectNotation","strInterpreter","result","svgParse","svgStr","dataStr","handle","replaceCommentBlock","fromModel","modelRep","svg","valAssign","withTo","RegExp","replaceHandleBars","isAttr","props","propsLength","tnr","self","ref","ln","inspectAttributes","nodeAttributes","attributes","a","ns","name","localName","removeAttribute","lookupParentNode","rootNode","hasAttribute","getAttribute","addEvent","evtData","evtName","Object","keys","handler","addEventListener","fn","e","stopPropagation","target","currentTarget","getIndex","addEventModel","testEventNode","evtStore","obs","args","push","hasChildNodes","recon","hasAttributes","events","isModel","apply","arguments","isEqual","oldNode","newNode","isPristine","compare","isIgnored","arbiter","nodeName","checked","setAttr","oAttr","output","iAttr","j","attr","patch","diff","store","count","newStore","checkNew","oldParentNode","checkOld","removeChild","diffNodes","instance","IS_STUB","clearState","stateList","parseStr","stub","setState","componentDidMount","_mount","svgHandler","_typeof","genId","rd","Math","random","toString","val","msg","Error","html","_len","Array","_key","literals","shift","substs","slice","raw","reduce","acc","lit","join","childLike","str","res","m","DELAY","morpher","genElement","componentDidUpdate","timer","updateContext","delay","clearTimeout","setTimeout","nextState","isArray","inVal","defineProperty","enumerable","configurable","get","set","notEqual","b","async","inform","mId","exec","CreateModel","genIdentity","listFilter","_this2","prop","filter","subscribe","add","_extends","kdata-id","update","updateObj","destroy","destroyObj","Keet","localize","LOCAL","indentity","autoRender","render","vtree","mount","proto","getPrototypeOf","constructor","storeRef","componentWillMount"],"mappings":"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","file":"keet-min.js","sourcesContent":["export default function (state, updateStateList) {\r\n  if (typeof updateStateList === 'function') updateStateList(state)\r\n}\r\n","import { getId } from '../../utils'\r\n\r\nconst DOCUMENT_FRAGMENT_TYPE = 11\r\n// storage for model state\r\nlet cache = {}\r\n\r\nfunction removeProtoModel (node, id) {\r\n  let p = node.getElementById(id)\r\n  if (p) p.childNodes[1].remove()\r\n}\r\n\r\nfunction genModelList (node, model, reconcile) {\r\n  let modelList\r\n  let i\r\n  let listClone\r\n  let parentNode\r\n  let list\r\n  let listArg\r\n  let mLength\r\n\r\n  cache[model] = cache[model] || {}\r\n\r\n  // check if the model use filtering\r\n  listArg = this[model] && this[model].enableFiltering ? 'listFilter' : 'list'\r\n\r\n  if (!cache[model][listArg]) {\r\n    cache[model][listArg] = node.nextSibling.cloneNode(true)\r\n    node.nextSibling.remove()\r\n    // also remove from pristine nodes / conditional cache store\r\n    removeProtoModel(this.__pristineFragment__, node.parentNode.id)\r\n  }\r\n\r\n  // exit on initial conditional setup\r\n  if (!reconcile) return\r\n\r\n  list = cache[model][listArg]\r\n\r\n  if (this[model] !== undefined && this[model].hasOwnProperty(listArg)) {\r\n    parentNode = node.parentNode.nodeType === DOCUMENT_FRAGMENT_TYPE ? getId(this.el) : node.parentNode\r\n\r\n    modelList = this[model][listArg]\r\n\r\n    if (!this[model].dirty) {\r\n      parentNode.setAttribute('pristine-model', '')\r\n      return\r\n    }\r\n\r\n    i = 0\r\n\r\n    mLength = modelList.length\r\n\r\n    while (i < mLength) {\r\n      listClone = list.cloneNode(true)\r\n      reconcile.call(this, listClone, null, modelList[i])\r\n      listClone.setAttribute('kdata-id', modelList[i]['kdata-id'])\r\n      parentNode.insertBefore(listClone, parentNode.lastChild)\r\n      i++\r\n    }\r\n    this[model].dirty = false\r\n  }\r\n}\r\n\r\nexport default genModelList\r\n","import genModelList from './genModelList'\r\n\r\nconst conditionalNodesRawEnd = /\\{\\{\\/([^{}]+)\\}\\}/g\r\nconst modelRaw = /\\{\\{model:([^{}]+)\\}\\}/g\r\nconst re = /([^{{model:])(.*?)(?=\\}\\})/g\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nlet cache = {}\r\n\r\n// rebuild the node structure\r\nfunction catchNode (node, start) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.nextSibling\r\n    if (cNode && cNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (cNode.isEqualNode(start)) {\r\n        cNode.remove()\r\n        start = start.nextSibling\r\n      } else {\r\n        catchNode(cNode.firstChild, start)\r\n      }\r\n    } else if (cNode.isEqualNode(start)) {\r\n      cNode.remove()\r\n      start = start.nextSibling\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkHasModel (conditional, node) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.nextSibling\r\n    if (cNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      checkHasModel.call(this, conditional, cNode.firstChild)\r\n    } else if (cNode.nodeType === DOCUMENT_COMMENT_TYPE && cNode.nodeValue.match(modelRaw)) {\r\n      let model = cNode.nodeValue.trim().match(re)\r\n      if (model.length) {\r\n        cache[conditional].models = cache[conditional].models || []\r\n        cache[conditional].models = cache[conditional].models.concat(model)\r\n        // cache the model without propagating DOM changes\r\n        genModelList.call(this, cNode, model, null)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolveConditionalNodes (node, conditional, setup, runner, addState) {\r\n  let currentNode\r\n  let cNode\r\n  let fetchFrag\r\n  let frag = document.createDocumentFragment()\r\n  if (setup === 'initial' && !cache.hasOwnProperty(conditional)) {\r\n    cNode = node\r\n    while (cNode) {\r\n      currentNode = cNode\r\n      cNode = cNode.nextSibling\r\n      if (currentNode.nodeType !== DOCUMENT_ELEMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawEnd)) {\r\n        cNode = null\r\n        cache[conditional] = cache[conditional] || {}\r\n        // clean up pristine node\r\n        catchNode(this.__pristineFragment__.firstChild, frag.firstChild)\r\n        // check if nodes has model(s)\r\n        checkHasModel.call(this, conditional, frag.firstChild)\r\n        cache[conditional].frag = frag\r\n      } else if (currentNode.nodeType !== DOCUMENT_COMMENT_TYPE) {\r\n        frag.appendChild(currentNode)\r\n      }\r\n    }\r\n  } else if (setup === 'conditional-set') {\r\n    if (!cache[conditional] || node.nextSibling.isEqualNode(cache[conditional].frag.firstChild)) return\r\n    fetchFrag = cache[conditional].frag.cloneNode(true)\r\n    // if cache has model(s), mark all as dirty, since all were removed from DOM\r\n    // on last iteration\r\n    if (cache[conditional].models && cache[conditional].models.length) {\r\n      cache[conditional].models.map(model => {\r\n        this[model].dirty = true\r\n      })\r\n    }\r\n    runner.call(this, fetchFrag.firstChild, addState)\r\n    node.parentNode.insertBefore(fetchFrag, node.nextSibling)\r\n  }\r\n}\r\n\r\nexport {\r\n  resolveConditionalNodes as default,\r\n  cache\r\n}\r\n","import updateState from './updateState'\r\nimport conditionalNodes from '../conditionalNodes'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\n\r\nlet conditional\r\nlet currentNode\r\nlet state\r\nlet nodes\r\n\r\nfunction check (node) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      check.call(this, currentNode.firstChild)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      conditional = currentNode.nodeValue.trim().match(reConditional)\r\n      state = state.concat(conditional)\r\n      nodes = nodes.concat(currentNode)\r\n    }\r\n  }\r\n}\r\n\r\nfunction conditionalCache (addState) {\r\n  state = []\r\n  nodes = []\r\n  check.call(this, this.base.firstChild)\r\n  let i = state.length\r\n  while (i > 0) {\r\n    i--\r\n    updateState(state[i], addState.bind(this))\r\n    conditionalNodes.call(this, nodes[i], state[i], 'initial')\r\n  }\r\n}\r\n\r\nexport default conditionalCache\r\n","import { assert, getId } from '../../utils'\r\n\r\nlet cacheInit = {}\r\n\r\nfunction getKeetGlobalComponent (component) {\r\n  if (window && typeof window.__keetGlobalComponentRef__ === 'object') {\r\n    let index = window.__keetGlobalComponentRef__.map(c => c.identifier).indexOf(component)\r\n    if (~index) {\r\n      return window.__keetGlobalComponentRef__[index].component\r\n    }\r\n  }\r\n}\r\n\r\nexport default function (componentStr, node) {\r\n  const component = componentStr.replace('component:', '')\r\n  const c = this[component] || getKeetGlobalComponent(component)\r\n  if (c !== undefined) {\r\n    // this is for initial component runner\r\n    if (!cacheInit[c.ID]) {\r\n      c.cycleVirtualDomTree(true)\r\n      cacheInit[c.ID] = c.base.cloneNode(true)\r\n      node.parentNode.replaceChild(c.base, node)\r\n    } else {\r\n      // we need to reattach event listeners if the node is not available on DOM\r\n      if (!getId(c.el)) {\r\n        c.base = c.__pristineFragment__.cloneNode(true)\r\n        c.cycleVirtualDomTree(true)\r\n        node.parentNode.replaceChild(c.base, node)\r\n      } else {\r\n        node.parentNode.replaceChild(cacheInit[c.ID].cloneNode(true), node)\r\n        // inform sub-component to update\r\n        c.callBatchPoolUpdate()\r\n      }\r\n    }\r\n  } else {\r\n    assert(false, 'Component ' + component + ' does not exist.')\r\n  }\r\n}\r\n","import { minId } from '../../utils'\r\n\r\nconst svgRe = /(<svg)([^<]*|[^>]*)(.*?)(?=<\\/svg>)/g\r\n\r\nlet svgData = {}\r\n\r\nfunction parseSVG (base) {\r\n  let svgList\r\n  let id\r\n  if (typeof base === 'string') {\r\n    svgList = base.match(svgRe)\r\n    if (svgList && svgList.length) {\r\n      this.IS_SVG = true\r\n      svgList.map(ls => {\r\n        id = minId()\r\n        svgData[id] = ls\r\n        base = base.replace(ls, `<!-- {{svg:${id}}} -->`)\r\n      })\r\n    }\r\n  }\r\n  return base\r\n}\r\n\r\nexport {\r\n  parseSVG as default,\r\n  svgData\r\n}\r\n","const DOCUMENT_TEXT_TYPE = 3\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\n// clean up nodes\r\nfunction clear (node) {\r\n  let f\r\n  while (node) {\r\n    f = node\r\n    node = node.nextSibling\r\n    if (f.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      clear(f.firstChild)\r\n    } else if (f.nodeType === DOCUMENT_TEXT_TYPE && f.nodeValue === ' ') {\r\n      f.remove()\r\n    }\r\n  }\r\n}\r\n\r\nexport default clear\r\n","import clear from './clear'\r\n\r\nexport default function (frag, base) {\r\n  let tempDiv = document.createElement('div')\r\n  tempDiv.innerHTML = base\r\n  clear(tempDiv.firstChild)\r\n  while (tempDiv.firstChild) {\r\n    frag.appendChild(tempDiv.firstChild)\r\n  }\r\n}\r\n","// function to resolve ternary operation\r\n\r\nconst test = str => str === '\\'\\'' || str === '\"\"' || str === 'null' ? '' : str\r\n\r\nexport default function (input) {\r\n  if (input.match(/([^?]*)\\?([^:]*):([^;]*)|(\\s*=\\s*)[^;]*/g)) {\r\n    let t = input.split('?')\r\n    let condition = t[0]\r\n    let leftHand = t[1].split(':')[0]\r\n    let rightHand = t[1].split(':')[1]\r\n\r\n    // check the condition fulfillment\r\n\r\n    if (this) {\r\n      if (this[condition]) {\r\n        return {\r\n          value: test(leftHand),\r\n          state: condition\r\n        }\r\n      } else {\r\n        return {\r\n          value: test(rightHand),\r\n          state: condition\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  } else return false\r\n}\r\n","import ternaryOps from './ternaryOps'\r\nimport strInterpreter from './strInterpreter'\r\nimport updateState from './templateParse/updateState'\r\n\r\nconst re = new RegExp(/(\\schecked=\")(.*?)(?=\")/g)\r\n\r\nlet tmpl = ''\r\nlet rep\r\nlet isTernary\r\nlet i\r\nlet len\r\nlet match\r\nlet isObjectNotation\r\n\r\nexport default function (string, obj, addState) {\r\n  if (obj) {\r\n    addState = false\r\n  }\r\n  obj = obj || this\r\n  const arrProps = string.match(/{{([^{}]+)}}/g)\r\n  tmpl = string\r\n  for (i = 0, len = arrProps.length; i < len; i++) {\r\n    rep = arrProps[i].replace(/{{([^{}]+)}}/g, '$1')\r\n    isTernary = ternaryOps.call(obj, rep)\r\n    isObjectNotation = strInterpreter(rep)\r\n    if (isTernary) {\r\n      updateState(rep, addState)\r\n      tmpl = tmpl.replace('{{' + rep + '}}', isTernary.value)\r\n    } else if (isObjectNotation) {\r\n      if (isObjectNotation[0] === 'this' && typeof this[isObjectNotation[1]] === 'function') {\r\n        let result = this[isObjectNotation[1]](obj)\r\n        if (result !== undefined) {\r\n          tmpl = tmpl.replace('{{' + rep + '}}', result)\r\n        }\r\n      }\r\n    } else {\r\n      if (obj[rep] !== undefined) {\r\n        updateState(rep, addState)\r\n        tmpl = tmpl.replace('{{' + rep + '}}', obj[rep])\r\n      }\r\n    }\r\n\r\n    match = tmpl.match(re)\r\n    if (match) {\r\n      if (match[0].length === 17) { tmpl = tmpl.replace(' checked=\"checked\"', ' checked') } else { tmpl = tmpl.replace(' checked=\"\"', '') }\r\n    }\r\n  }\r\n  return tmpl\r\n}\r\n","import { svgData } from '../base/svgHandler'\r\nimport mountToFragment from '../base/mountToFragment'\r\nimport genModelTemplate from './genModelTemplate'\r\n\r\nconst handle = /{{([^{}]+)}}/g\r\n\r\nlet frag = document.createDocumentFragment()\r\n\r\nexport default function (svgStr, node, model, addState) {\r\n  let id = svgStr.replace('svg:', '')\r\n  let dataStr = svgData[id]\r\n  let base = genModelTemplate.call(this, dataStr, model, addState)\r\n  if (!base.match(handle)) {\r\n    mountToFragment(frag, base)\r\n    node.parentNode.replaceChild(frag.firstChild, node)\r\n  }\r\n}\r\n","import genModelList from '../genModelList'\r\nimport componentParse from '../componentParse'\r\nimport svgParse from '../svgParse'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\nconst model = /^model:/g\r\nconst component = /^component:([^{}]+)/g\r\nconst svg = /^svg:([^{}]+)/g\r\n\r\nexport default function (value, node, reconcile, fromModel, addState) {\r\n  let rep\r\n  let modelRep\r\n\r\n  if (value.match(re)) {\r\n    rep = value.replace(re, '$1').trim()\r\n    if (rep.match(model)) {\r\n      modelRep = rep.replace('model:', '')\r\n      genModelList.call(this, node, modelRep, reconcile)\r\n    } else if (rep.match(component)) {\r\n      componentParse.call(this, rep, node)\r\n    } else if (this.IS_SVG && rep.match(svg)) {\r\n      svgParse.call(this, rep, node, fromModel, addState)\r\n    }\r\n  }\r\n}\r\n","export default function (node, replace, withTo) {\r\n  let re = new RegExp(replace, 'g')\r\n  node.nodeValue = node.nodeValue.replace(re, withTo)\r\n}\r\n","import ternaryOps from '../ternaryOps'\r\nimport strInterpreter from '../strInterpreter'\r\nimport updateState from './updateState'\r\nimport valAssign from './valAssign'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nexport default function (value, node, addState, isAttr, model) {\r\n  const props = value.match(re)\r\n  if (!props) return\r\n  let propsLength = props.length\r\n  let rep\r\n  let tnr\r\n  let isObjectNotation\r\n\r\n  let self = this\r\n\r\n  let ref = model || this\r\n\r\n  let ln = 0\r\n\r\n  while (ln < propsLength) {\r\n    rep = props[ln].replace(re, '$1')\r\n    tnr = ternaryOps.call(ref, rep)\r\n    isObjectNotation = strInterpreter(rep)\r\n    if (isObjectNotation) {\r\n      if (!isAttr) {\r\n        if (isObjectNotation[0] === 'this' && self[isObjectNotation[1]] !== undefined && typeof self[isObjectNotation[1]] === 'function') {\r\n          let result = self[isObjectNotation[1]]()\r\n          if (result !== undefined) {\r\n            valAssign(node, '{{' + rep + '}}', result)\r\n          }\r\n        } else {\r\n          updateState(rep, addState)\r\n          valAssign(node, '{{' + rep + '}}', self[isObjectNotation[0]][isObjectNotation[1]])\r\n        }\r\n      } else {\r\n        if (isObjectNotation[0] === 'this' && self[isObjectNotation[1]] !== undefined && typeof self[isObjectNotation[1]] === 'function') {\r\n          let result = self[isObjectNotation[1]](ref)\r\n          value = result !== undefined ? result : value\r\n        } else {\r\n          updateState(rep, addState)\r\n          value = value.replace(props[ln], self[isObjectNotation[0]][isObjectNotation[1]])\r\n        }\r\n      }\r\n    } else if (tnr) {\r\n      updateState(tnr.state, addState)\r\n      if (!isAttr) {\r\n        // escape symbol\r\n        rep = rep.replace('?', '\\\\?')\r\n        valAssign(node, '{{' + rep + '}}', tnr.value)\r\n      } else {\r\n        value = value.replace(props[ln], tnr.value)\r\n      }\r\n    } else {\r\n      if (ref[rep] !== undefined) {\r\n        updateState(rep, addState)\r\n        if (!isAttr) {\r\n          valAssign(node, '{{' + rep + '}}', ref[rep])\r\n        } else {\r\n          value = value.replace(props[ln], ref[rep])\r\n        }\r\n      }\r\n    }\r\n    ln++\r\n  }\r\n  return value\r\n}\r\n","import replaceHandleBars from './replaceHandleBars'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction inspectAttributes (node, addState, model) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let ns\r\n  let name\r\n\r\n  for (i = nodeAttributes.length; i--;) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    ns = a.nodeValue\r\n    if (re.test(name)) {\r\n      node.removeAttribute(name)\r\n      name = replaceHandleBars.call(this, name, node, addState, true, model)\r\n      node.setAttribute(name, ns)\r\n    } else if (re.test(ns)) {\r\n      ns = replaceHandleBars.call(this, ns, node, addState, true, model)\r\n      if (name === 'checked') {\r\n        if (ns === '') {\r\n          node.removeAttribute(name)\r\n        } else {\r\n          node.setAttribute(name, '')\r\n        }\r\n      } else {\r\n        if (ns === '') {\r\n          node.setAttribute(name, '')\r\n        } else {\r\n          node.setAttribute(name, ns)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default inspectAttributes\r\n","const DOCUMENT_ELEMENT_TYPE = 1\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction lookupParentNode (rootNode, node) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.parentNode\r\n    if (cNode.nodeType === DOCUMENT_ELEMENT_TYPE && cNode.hasAttribute('kdata-id')) {\r\n      return { id: cNode.getAttribute('kdata-id'), node: cNode }\r\n    }\r\n    if (cNode.isEqualNode(rootNode)) {\r\n      node = null\r\n    }\r\n  }\r\n}\r\n\r\nconst getIndex = (id, model) => model.list.map(m => m['kdata-id']).indexOf(id)\r\n\r\nfunction addEvent (node, evtData) {\r\n  // delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    node.addEventListener(evtName, this[handler].bind(this), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nfunction fn (model, handler, node, e) {\r\n  e.stopPropagation()\r\n  if (e.target !== e.currentTarget) {\r\n    let t = lookupParentNode(node, e.target)\r\n    this[handler](model.list[getIndex(t.id, model)], e.target, t.node, e)\r\n  }\r\n}\r\n\r\nfunction addEventModel (node, evtData) {\r\n  // delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    let rep = node.firstChild.nodeValue.replace(re, '$1').trim()\r\n    rep = rep.replace('model:', '')\r\n    let model = this[rep]\r\n    node.addEventListener(evtName, fn.bind(this, model, handler, node), !!evtData['useCapture'])\r\n  }\r\n}\r\n\r\nexport {\r\n  addEvent,\r\n  addEventModel\r\n}\r\n","import replaceCommentBlock from './replaceCommentBlock'\r\nimport inspectAttributes from './inspectAttributes'\r\nimport replaceHandleBars from './replaceHandleBars'\r\nimport conditionalNodes from '../conditionalNodes'\r\n\r\nimport { getId } from '../../../utils'\r\nimport { addEvent, addEventModel } from './addEvent'\r\n\r\nconst conditionalNodesRawStart = /\\{\\{\\?([^{}]+)\\}\\}/g\r\nconst reConditional = /([^{?])(.*?)(?=\\}\\})/g\r\nconst re = /{{([^{}]+)}}/g\r\nconst modelRaw = /\\{\\{model:([^{}]+)\\}\\}/g\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nfunction testEventNode (node) {\r\n  let nodeAttributes = node.attributes\r\n  let i = 0\r\n  let a\r\n  let name\r\n  let value\r\n  let evtName\r\n  let handler\r\n  let evtStore = []\r\n  let obs\r\n  let args\r\n\r\n  while (i < nodeAttributes.length) {\r\n    a = nodeAttributes[i]\r\n    name = a.localName\r\n    value = a.nodeValue\r\n    if (/^k-/.test(name)) {\r\n      evtName = name.replace(/^k-/, '')\r\n      handler = value.match(/[a-zA-Z]+(?![^(]*\\))/)[0]\r\n      args = value.match(/\\(([^{}]+)\\)/)\r\n      args = args ? args[1] : ''\r\n      obs = {}\r\n      obs[evtName] = handler\r\n      if (args) obs[args] = true\r\n      obs['isModel'] = false\r\n      evtStore.push(obs)\r\n      if (node.hasChildNodes() && node.firstChild.nodeType !== DOCUMENT_ELEMENT_TYPE && node.firstChild.nodeValue.match(modelRaw)) {\r\n        obs['isModel'] = true\r\n      }\r\n    }\r\n    i++\r\n  }\r\n  return evtStore\r\n}\r\n\r\nlet events\r\nlet c\r\nlet currentNode\r\n\r\nfunction recon (node, addState, model) {\r\n  while (node) {\r\n    currentNode = node\r\n    node = node.nextSibling\r\n    if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (currentNode.hasAttributes()) {\r\n        inspectAttributes.call(this, currentNode, addState, model)\r\n\r\n        // to take advantage of caching always assigned id to the node\r\n        // we only assign eventListener on first mount to DOM or when the node is not available on DOM\r\n        if (!getId(currentNode.id)) {\r\n          events = testEventNode.call(this, currentNode)\r\n          if (events.length) {\r\n            events.map(e => {\r\n              !e.isModel ? addEvent.call(this, currentNode, e) : addEventModel.call(this, currentNode, e)\r\n              currentNode.removeAttribute(`k-${Object.keys(e)[0]}`)\r\n            })\r\n          }\r\n        }\r\n      }\r\n      recon.call(this, currentNode.firstChild, addState, model)\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      c = currentNode.nodeValue.trim().match(reConditional)\r\n      c = c && c[0]\r\n      if (this[c]) {\r\n        conditionalNodes.call(this, currentNode, c, 'conditional-set', reconcile, addState)\r\n      }\r\n    } else if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE && currentNode.nodeValue.match(re) && !currentNode.nodeValue.match(conditionalNodesRawStart)) {\r\n      replaceCommentBlock.call(this, currentNode.nodeValue, currentNode, reconcile, model, addState)\r\n    } else {\r\n      replaceHandleBars.call(this, currentNode.nodeValue, currentNode, addState, null, model)\r\n    }\r\n  }\r\n}\r\n\r\n// instance, addState, model\r\nfunction reconcile () {\r\n  recon.apply(this, arguments)\r\n}\r\n\r\nexport default reconcile\r\n","import { getId } from '../../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nfunction isEqual (oldNode, newNode) {\r\n  return (\r\n    isPristine(newNode) ||\r\n    compare(oldNode, newNode) ||\r\n    oldNode.isEqualNode(newNode)\r\n  )\r\n}\r\n\r\nfunction compare (oldNode, newNode) {\r\n  return isIgnored(oldNode) && isIgnored(newNode)\r\n}\r\n\r\nfunction isIgnored (node) {\r\n  return node.getAttribute('data-ignore') != null\r\n}\r\n\r\nfunction arbiter (oldNode, newNode) {\r\n  if (oldNode.nodeName !== 'INPUT') return\r\n  if (oldNode.checked !== newNode.checked) {\r\n    oldNode.checked = newNode.checked\r\n  }\r\n}\r\n\r\nfunction setAttr (oldNode, newNode) {\r\n  let oAttr = newNode.attributes\r\n  let output = {}\r\n  let i = 0\r\n  while (i < oAttr.length) {\r\n    output[oAttr[i].name] = oAttr[i].value\r\n    i++\r\n  }\r\n  let iAttr = oldNode.attributes\r\n  let input = {}\r\n  let j = 0\r\n  while (j < iAttr.length) {\r\n    input[iAttr[j].name] = iAttr[j].value\r\n    j++\r\n  }\r\n  for (let attr in output) {\r\n    if (oldNode.attributes[attr] && oldNode.attributes[attr].name === attr && oldNode.attributes[attr].value !== output[attr]) {\r\n      oldNode.setAttribute(attr, output[attr])\r\n    } else {\r\n      // add new attributes as long is not part of k-<eventListener>\r\n      if (!oldNode.hasAttribute(attr) && !/^k-/.test(attr)) {\r\n        oldNode.setAttribute(attr, output[attr])\r\n      }\r\n    }\r\n  }\r\n  for (let attr in input) {\r\n    // if attributes does not exist on the new node we removed it from the old node\r\n    if (newNode.attributes[attr] && oldNode.attributes[attr]) {\r\n    } else {\r\n      oldNode.removeAttribute(attr)\r\n    }\r\n  }\r\n}\r\n\r\nfunction patch (oldNode, newNode) {\r\n  if (oldNode.nodeType === newNode.nodeType) {\r\n    if (oldNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      arbiter(oldNode, newNode)\r\n      if (isEqual(oldNode, newNode)) return\r\n      diff(oldNode.firstChild, newNode.firstChild)\r\n      if (oldNode.nodeName === newNode.nodeName) {\r\n        setAttr(oldNode, newNode)\r\n      } else {\r\n        oldNode.parentNode.replaceChild(newNode, oldNode)\r\n      }\r\n    } else {\r\n      if (oldNode.nodeValue !== newNode.nodeValue) {\r\n        oldNode.nodeValue = newNode.nodeValue\r\n      }\r\n    }\r\n  } else {\r\n    oldNode.parentNode.replaceChild(newNode, oldNode)\r\n  }\r\n}\r\n\r\nfunction getIndex (store, count) {\r\n  return store.length - count - 1\r\n}\r\n\r\nlet checkNew\r\nlet checkOld\r\n\r\nfunction diff (oldNode, newNode) {\r\n  let count = 0\r\n  let newStore = []\r\n  while (newNode) {\r\n    count++\r\n    checkNew = newNode\r\n    newNode = newNode.nextSibling\r\n    newStore.push(checkNew)\r\n  }\r\n  let index\r\n  let oldParentNode = oldNode && oldNode.parentNode\r\n  while (oldNode) {\r\n    count--\r\n    checkOld = oldNode\r\n    oldNode = oldNode.nextSibling\r\n    index = getIndex(newStore, count)\r\n    if (checkOld && newStore[index]) {\r\n      patch(checkOld, newStore[index])\r\n    } else if (checkOld && !newStore[index]) {\r\n      oldParentNode.removeChild(checkOld)\r\n    }\r\n    if (oldNode === null) {\r\n      while (count > 0) {\r\n        count--\r\n        index = getIndex(newStore, count)\r\n        oldParentNode.appendChild(newStore[index])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isPristine (node) {\r\n  return node.hasAttribute('pristine-model')\r\n}\r\n\r\nfunction diffNodes (instance) {\r\n  let base = getId(this.el)\r\n  if (base && !this.IS_STUB) {\r\n    diff(base.firstChild, instance)\r\n  } else if (base && !isPristine(instance)) {\r\n    diff(base.firstChild, instance.firstChild)\r\n  }\r\n}\r\n\r\nexport default diffNodes\r\n","\r\nimport reconcile from './templateParse/reconcile'\r\nimport diffNodes from './templateParse/diffNodes'\r\nimport strInterpreter from './strInterpreter'\r\n\r\nconst DELAY = 0\r\n\r\nconst morpher = function () {\r\n  genElement.call(this)\r\n  // exec life-cycle componentDidUpdate\r\n  if (this.componentDidUpdate && typeof this.componentDidUpdate === 'function') {\r\n    this.componentDidUpdate()\r\n  }\r\n}\r\n\r\nlet timer = {}\r\n\r\nconst updateContext = function (fn, delay) {\r\n  timer[this.ID] = timer[this.ID] || null\r\n  clearTimeout(timer[this.ID])\r\n  timer[this.ID] = setTimeout(() => fn.call(this), delay)\r\n}\r\n\r\nconst nextState = function (i) {\r\n  let self = this\r\n  let state\r\n  let value\r\n  if (!stateList[this.ID]) return\r\n  if (i < stateList[this.ID].length) {\r\n    state = stateList[this.ID][i]\r\n    value = this[state]\r\n\r\n    // if value is undefined, likely has object notation we convert it to array\r\n    if (value === undefined) value = strInterpreter(state)\r\n\r\n    if (value && Array.isArray(value)) {\r\n      // using split object notation as base for state update\r\n      let inVal = this[value[0]][value[1]]\r\n\r\n      Object.defineProperty(this[value[0]], value[1], {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return inVal\r\n        },\r\n        set: function (val) {\r\n          inVal = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    } else {\r\n      // handle parent state update if the state is not an object\r\n      Object.defineProperty(this, state, {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return value\r\n        },\r\n        set: function (val) {\r\n          value = val\r\n          updateContext.call(self, morpher, DELAY)\r\n        }\r\n      })\r\n    }\r\n    i++\r\n    nextState.call(this, i)\r\n  }\r\n}\r\n\r\nconst setState = function () {\r\n  nextState.call(this, 0)\r\n}\r\n\r\nlet stateList = {}\r\n\r\nfunction clearState () {\r\n  if (stateList[this.ID]) stateList[this.ID] = []\r\n}\r\n\r\nfunction addState (state) {\r\n  stateList[this.ID] = stateList[this.ID] || []\r\n  if (stateList[this.ID].indexOf(state) === -1) { stateList[this.ID] = stateList[this.ID].concat(state) }\r\n}\r\n\r\nconst genElement = function () {\r\n  this.base = this.__pristineFragment__.cloneNode(true)\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  diffNodes.call(this, this.base.firstChild)\r\n}\r\n\r\nexport {\r\n  genElement,\r\n  addState,\r\n  setState,\r\n  clearState,\r\n  updateContext,\r\n  morpher\r\n}\r\n","import conditionalCache from './templateParse/conditionalCache'\r\nimport reconcile from './templateParse/reconcile'\r\nimport { setState, addState } from './genElement'\r\nimport { getId, assert } from '../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nexport default function (stub) {\r\n  conditionalCache.call(this, addState.bind(this))\r\n  reconcile.call(this, this.base.firstChild, addState.bind(this))\r\n  const el = stub || getId(this.el)\r\n  if (el) {\r\n    if (el.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      el.setAttribute('data-ignore', '')\r\n    } else {\r\n      assert(this.base.childNodes.length === 1, 'Sub-component should only has a single rootNode.')\r\n      !this.base.firstChild.hasAttribute('data-ignore') && this.base.firstChild.setAttribute('data-ignore', '')\r\n    }\r\n    // listen to state changes\r\n    setState.call(this)\r\n    // mount fragment to DOM\r\n    if (!stub) {\r\n      el.appendChild(this.base)\r\n    }\r\n\r\n    // since component already rendered, trigger its life-cycle method\r\n    if (this.componentDidMount && typeof this.componentDidMount === 'function') {\r\n      this.componentDidMount()\r\n    }\r\n  } else {\r\n    assert(false, 'No element id: \"' + this.el + '\" exist or is this a child component?')\r\n  }\r\n}\r\n","import { clearState } from '../components/genElement'\r\nimport svgHandler from './svgHandler'\r\nimport { assert } from '../../utils'\r\nimport mountToFragment from './mountToFragment'\r\n\r\nconst DOCUMENT_FRAGMENT_TYPE = 11\r\nconst DOCUMENT_TEXT_TYPE = 3\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Mount an instance of string or html elements\r\n *\r\n * @param {String|Object} instance - the html/string\r\n */\r\nexport default function (instance) {\r\n  let base\r\n  let frag = document.createDocumentFragment()\r\n\r\n  // cleanup states on mount\r\n  clearState.call(this)\r\n\r\n  // Before we begin to parse an instance, do a run-down checks\r\n  // to clean up back-tick string which usually has line spacing.\r\n  if (typeof instance === 'string') {\r\n    // cleanup spacing\r\n    base = instance.trim().replace(/\\s+/g, ' ')\r\n\r\n    // parse svg elements\r\n    base = svgHandler.call(this, base)\r\n\r\n    mountToFragment(frag, base)\r\n\r\n  // If instance is a html element process as html entities\r\n  } else if (typeof instance === 'object' && instance['nodeType']) {\r\n    // parse svg elements\r\n\r\n    if (instance['nodeType'] === DOCUMENT_ELEMENT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else if (instance['nodeType'] === DOCUMENT_FRAGMENT_TYPE) {\r\n      frag = instance\r\n    } else if (instance['nodeType'] === DOCUMENT_TEXT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else {\r\n      assert(false, 'Unable to parse instance, unknown type.')\r\n    }\r\n  } else {\r\n    assert(false, 'Parameter is not a string or a html element.')\r\n  }\r\n  // we store the pristine instance in __pristineFragment__\r\n  this.__pristineFragment__ = frag.cloneNode(true)\r\n  this.base = frag\r\n\r\n  return this\r\n}\r\n","const genId = () => {\r\n  const rd = () => (Math.random() * 1 * 1e17).toString(36)\r\n  return `KDATA-${rd()}-${rd()}`\r\n}\r\n\r\nconst minId = () => (Math.random() * 1 * 1e17).toString(36)\r\n\r\nconst getId = id => document.getElementById(id)\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Check a node availability in 100ms, if not found silenty skip the event\r\n * or execute a callback\r\n *\r\n * @param {string} id - the node id\r\n * @param {function} callback - the function to execute on success\r\n * @param {function} notFound - the function to execute on failed\r\n */\r\nconst checkNodeAvailability = (component, componentName, callback, notFound) => {\r\n  let ele = getId(component.el)\r\n  let found = false\r\n  let t\r\n  function find () {\r\n    ele = getId(component.el)\r\n    if (ele) {\r\n      clearInterval(t)\r\n      found = true\r\n      callback(component, componentName, ele)\r\n    }\r\n  }\r\n  function fail () {\r\n    clearInterval(t)\r\n    if (!found && notFound && typeof notFound === 'function') notFound()\r\n  }\r\n  if (ele) return ele\r\n  else {\r\n    t = setInterval(find, 0)\r\n    // ignore finding the node after sometimes\r\n    setTimeout(fail, 5)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Confirm that a value is truthy, throws an error message otherwise.\r\n *\r\n * @param {*} val - the val to test.\r\n * @param {string} msg - the error message on failure.\r\n * @throws {Error}\r\n */\r\nconst assert = (val, msg) => {\r\n  if (!val) throw new Error('(keet) ' + msg)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Simple html template literals MODIFIED from : http://2ality.com/2015/01/template-strings-html.html\r\n * by Dr. Axel Rauschmayer\r\n * no checking for wrapping in root element\r\n * no strict checking\r\n * remove spacing / indentation\r\n * keep all spacing within html tags\r\n * include handling ${} in the literals\r\n */\r\nconst html = (...args) => {\r\n  const literals = args.shift()\r\n  const substs = args.slice()\r\n\r\n  let result = literals.raw.reduce((acc, lit, i) => acc + substs[i - 1] + lit)\r\n  // remove spacing, indentation from every line\r\n  result = result.split(/\\n+/)\r\n  result = result.map(t => t.trim()).join('')\r\n  return result\r\n}\r\n\r\n/**\r\n * @private\r\n * @decorator\r\n * Add checking for child component\r\n */\r\nconst childLike = function () {\r\n  return function (target) {\r\n    target.IS_STUB = true\r\n  }\r\n}\r\n\r\nexport {\r\n  html,\r\n  assert,\r\n  checkNodeAvailability,\r\n  genId,\r\n  getId,\r\n  minId,\r\n  childLike\r\n}\r\n","export default (str) => {\r\n  let res = str.match(/\\.*\\./g)\r\n  let result\r\n  if (res && res.length > 0) {\r\n    return str.split('.')\r\n  }\r\n  return result\r\n}\r\n","import { minId } from '../../utils'\r\n\r\n/**\r\n * @module keet/CreateModel\r\n * @example\r\n * import { CreateModel } from 'keet'\r\n *\r\n * class myModel extends CreateModel {\r\n *   contructor() {\r\n *     super()\r\n *     // props\r\n *   }\r\n *   // new extended method\r\n *   myMethod(...args){\r\n *     this.list = args\r\n *   }\r\n * }\r\n *\r\n * const MyModel = new myModel()\r\n */\r\n\r\n// check two objects properties attribute kdata-id and return the value equality\r\nconst notEqual = function (a, b) {\r\n  return a['kdata-id'] !== b['kdata-id']\r\n}\r\n\r\nlet async = {}\r\n\r\n// We otimize component lifeCycle triggering by trottling the model batch updates\r\nconst inform = function (...args) {\r\n  if (async[this.mId]) clearTimeout(async[this.mId])\r\n  async[this.mId] = setTimeout(() =>\r\n    this.exec && typeof this.exec === 'function' && this.exec.apply(null, args)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * The model constructor, use with template literal having\r\n * ```{{model:<myModel>}}<myModelTemplateString>{{/model:<myModel>}}```\r\n * @alias module:keet/createModel\r\n * @param {*} enableFiltering - any truthy value\r\n *\r\n */\r\nexport default class CreateModel {\r\n  constructor (enableFiltering) {\r\n    this.mId = CreateModel.genIdentity\r\n\r\n    async[this.mId] = null\r\n    // if enableFiltering is assigned a value, model generation will\r\n    // use `listFilter` instead of `list`\r\n    this.enableFiltering = enableFiltering || null\r\n\r\n    this.model = []\r\n\r\n    // Register callback listener of any changes\r\n    Object.defineProperty(this, 'list', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return this.model\r\n      },\r\n      set: function (val) {\r\n        this.model = val\r\n        this.dirty = true\r\n        inform.call(this, this.model, this.listFilter)\r\n      }\r\n    })\r\n\r\n    // Register callback listener of any changes with filter\r\n    Object.defineProperty(this, 'listFilter', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return !this.prop ? this.model : this.model.filter(obj => obj[this.prop] === this.value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // set identity for this model\r\n  static get genIdentity () {\r\n    return minId()\r\n  }\r\n\r\n  /**\r\n   * Subscribe to the model changes, the function callback first argument\r\n   * is the ```model.list``` and the second argument is ```model.listFilter```\r\n   * @param {Function} fn - the function callback for the subscribe\r\n   */\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  /**\r\n   * Add new object to the model list\r\n   * @param {Object} obj - new object to add into the model list\r\n   */\r\n  add (obj) {\r\n    this.list = this.list.concat({ ...obj, 'kdata-id': minId() })\r\n  }\r\n\r\n  /**\r\n   * Update existing object in the model list\r\n   * @param {Object} updateObj - the updated properties\r\n   */\r\n  update (updateObj) {\r\n    this.list = this.list.map(obj =>\r\n      notEqual(obj, updateObj) ? obj : updateObj\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Filter the model data by selected properties, constructor\r\n   * instantiation should be apply with boolean true as argument\r\n   * to enable filtering\r\n   * @param {string} prop - property of the object\r\n   * @param {Object|string|number|Boolean} value - property value\r\n   */\r\n  filter (prop, value) {\r\n    this.prop = prop\r\n    this.value = value\r\n    this.list = this.list\r\n  }\r\n\r\n  /**\r\n * Removed existing object in the model list\r\n * @param {Object} destroyObj - the object ref to remove from the model\r\n */\r\n  destroy (destroyObj) {\r\n    this.list = this.list.filter(obj => {\r\n      return notEqual(obj, destroyObj)\r\n    })\r\n  }\r\n}\r\n","\r\n//\r\n// Keetjs v4.2.2 Alpha release: https://github.com/keetjs/keet\r\n// Minimalist view layer for the web\r\n//\r\n// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Keetjs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n//\r\n// Copyright 2018, Shahrul Nizam Selamat\r\n// Released under the MIT License.\r\n//\r\n\r\n/**\r\n * @module keet\r\n * @example\r\n * import Keet from 'keet'\r\n *\r\n * class App extends Keet {\r\n *   contructor() {\r\n *     super()\r\n *     // props\r\n *   }\r\n *   // new extended method\r\n *   myMethod(...args){\r\n *     //\r\n *   }\r\n * }\r\n *\r\n * const app = new App()\r\n */\r\n\r\nimport parseStr from './src/components/parseStr'\r\nimport { updateContext, morpher } from './src/components/genElement'\r\nimport { genId, assert, html, childLike } from './utils'\r\nimport CreateModel from './src/base/createModel'\r\nimport mount from './src/base/mount'\r\n\r\n/**\r\n * The main constructor of Keet\r\n * @param {Boolean} localize - Use local inhertance for sub-components\r\n * instead using global referance\r\n */\r\nclass Keet {\r\n  constructor (localize) {\r\n    if (localize) {\r\n      this.LOCAL = true\r\n    }\r\n    this.ID = Keet.indentity\r\n    // mount vtree from render arguments\r\n    this.autoRender()\r\n  }\r\n\r\n  // Auto rendered on class constructor instantiation\r\n  async autoRender () {\r\n    await this.el\r\n    if (typeof this.render === 'function') {\r\n      const vtree = this.render()\r\n      this.mount(vtree)\r\n      // ensure parsing only done by root component\r\n      // check constructor if it decorated with childLike\r\n      const proto = Object.getPrototypeOf(this)\r\n      if (this.IS_STUB || (proto && proto.constructor.IS_STUB)) {\r\n        return\r\n      }\r\n      this.cycleVirtualDomTree()\r\n    }\r\n  }\r\n\r\n  // generate ID for the component\r\n  static get indentity () {\r\n    return genId()\r\n  }\r\n\r\n  /**\r\n   * Mount an instance of html/string template\r\n   * @param {Object|string} instance - the html/string template\r\n   */\r\n  mount (instance) {\r\n    if (!this.LOCAL) {\r\n      if (this.el) {\r\n        this.storeRef(this.el)\r\n      } else {\r\n        assert(false, `Component has no unique identifier.`)\r\n      }\r\n    }\r\n    return mount.call(this, instance)\r\n  }\r\n\r\n  /**\r\n   * Parse this component to the DOM\r\n   * @param {Boolean} stub - set as true if this a child component\r\n   */\r\n  cycleVirtualDomTree (stub) {\r\n    // life-cycle method before rendering the component\r\n    if (this.componentWillMount && typeof this.componentWillMount === 'function') {\r\n      this.componentWillMount()\r\n    }\r\n    // Render this component to the target DOM\r\n    if (stub) {\r\n      this.IS_STUB = true\r\n    }\r\n    parseStr.call(this, stub)\r\n  }\r\n\r\n  /**\r\n   * Recheck all states if anything changed, diffing will occurs.\r\n   * this method is ***asynchronous*** and ***trottled***, you can call it from a loop and\r\n   * only trigger diffing when the loop end\r\n   */\r\n  callBatchPoolUpdate () {\r\n    updateContext.call(this, morpher, 1)\r\n  }\r\n  /**\r\n   * Another component can subscribe to changes on this component.\r\n   * This is the subscribe method\r\n   * @param {Function} fn - the callback function for the subscribe\r\n   */\r\n  subscribe (fn) {\r\n    this.exec = this.exec || []\r\n    this.exec = this.exec.concat(fn)\r\n  }\r\n  /**\r\n   * Another component can subscribe to changes on this component.\r\n   * This is the publish method\r\n   * @param {...*} value - one or more parameters to publish to subscribers\r\n   */\r\n  inform (...args) {\r\n    if (this.exec.length) {\r\n      this.exec.map(fn => fn.apply(null, args))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store referance in the global space, with this the parent component do need\r\n   * to store/assign it as a property while still be able to look for the sub-component\r\n   * to initialize it\r\n   * @param {string} name - Identifier for the component, should be unique to avoid conflict\r\n   */\r\n  storeRef (name) {\r\n    window.__keetGlobalComponentRef__ = window.__keetGlobalComponentRef__ || []\r\n    let isExist = window.__keetGlobalComponentRef__.map(c => c.identifier).indexOf(name)\r\n    if (~isExist) {\r\n      assert(false, `The component name: ${name} already exist in the global pool.`)\r\n    } else {\r\n      window.__keetGlobalComponentRef__ = window.__keetGlobalComponentRef__.concat({\r\n        identifier: name,\r\n        component: this\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Keet as default,\r\n  html,\r\n  CreateModel,\r\n  childLike\r\n}\r\n"]}